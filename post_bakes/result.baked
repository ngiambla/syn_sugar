~$[ Syntactic Sugar ]$~
** Results **: 

[+153]   The partitioning is accomplished in a way that requires a single HLS execution and logic simulation for trace extraction.[142032.487029]
[+386]   Increasing the number of memory ports is expensive and may not be possible on the FPGA since the block RAMs have limited port conﬁgurations.[234003.249874]
[+528]   In this work, we are concerned with the synthesis of memory architectures for such spatially parallel implementations, where concurrently operating hardware units may vie for access to the same memory ports at the same time.[114921.424609]
[+836]   The key contributions of this paper are: • • • • Infrastructure for array partitioning implemented in the open-source LegUp-HLS framework.[238974.657889]
[+2447]   Limit to Power-of-2 Partitions In order to access a memory location in the newly partitioned memory scheme, the new access will require both the new partition number, as well as a new index into the partition where memory location now resides.[134068.539292]
[+2488]   The equation to determine the new partition number, pd , is: pd = id / b % n (1) where id is the index of the access in the dimension of partitioning, d; b is the block size and n is the number of partitions.[124297.695951]
[+2947]   In cyclic partitioning, we need a power of 2 number of partitions which is greater than 1 and less than S and a block size of 1.[598304.250613]
[+4297]   With reference to the variables in Table I, we have: N U Mb = |Bb | = D−1  log2 (Φ(Sd )) (6) d=0 where Sd is the number of elements in dimension d.[206484.645985]
[+4331]   The solution-set size for block partitioning is equal to the cardinality of the set of allowed values for the block size (in each dimension we have the option to choose any power-of-2-sized block size).[162831.693786]
[+4365]   For cyclic: N U Mc = |Nc | = D−1  log2 (Φ(Sd )) (7) d=0 Likewise, the solution-set size for cyclic partitioning is equal to the cardinality of the set of allowed values for the number of partitions.[326246.054865]
[+4404]   For block-cyclic partitioning: N U Mbc = D−1  log2 (Φ(S d ))−1 d=0 log2 (Φ(Sd )) − i (8) i=1 The outer sum is over all dimensions.[205191.258343]
[+4443]   The inner sum index i deﬁnes the legal block sizes for block cyclic partitioning: the block sizes are 2i , and therefore range from 21 to 2log2 (Φ(Sd ))−1 in powers-of-2.[135636.608377]
[+4517]   For each legal block size, log2 (Φ(Sd )) − i counts the number of ways the block size can be assigned to banks (number of partitions).[186684.000843]
[+4543]   Consider the simple case of a 2-dimensional array of 33 × 16 elements, D in this case is 2, S0 is 16 and S1 is 33.[211610.892208]
[+4701]   In future work, a pruning approach can be used to remove partitioning possibilities when they are known to perform worse than other schemes.[115804.911709]
[+5070]   Matrixmult performs matrix multiplication on two 32×32 input matrices – matrixA and matrixB, where each thread is responsible for computing the results of a chunk of rows.[251638.148221]
[+5097]   Matrixmult (cyclic) is a variation on the matrixmult benchmark, where each thread is responsible for computing the output for each row in a cyclic manner, where thread 0 will compute the outputs of row 0, 8, 16, etc.[127764.977685]
[+5209]   Matrixtrans (block cyclic) is a variant on matrixtrans benchmark, where each thread transposes a chunk of rows of the input for all columns into the output in a block cyclic manner.[147465.995468]
[+5560]   In matrixmult, matrixmult (cyclic), matrixtrans, and matrixtrans (block cyclic) the benchmarks each contain 2 matrices, and both can be partitioned.[209516.916399]
[+6309]   The goal of the memory simulator is to accurately predict the schedule of memory accesses of the circuit under various partitioning schemes from a memory access trace gathered from an unpartitioned implementation of the circuit under a representative input.[129621.184936]

 Baked Goods: 

~$[automated generation %%#%% banked memory 
architectures %%#%% %%#%% high%%dsh%%level synthesis %%#%% 
multi%%dsh%%threaded software 
yu ting chen ]^[ jason h%%per%%]$~ ~$[anderson 
department %%#%% electrical ]^[ computer engineering%%lst%% university %%#%% toronto%%lst%% toronto%%lst%% ontario 
email%%cln%% joyuting%%per%%chen@mail%%per%%utoronto%%per%%ca%%lst%% janders@ece%%per%%toronto%%per%%edu 
abstract— 
%%#%% modern high%%dsh%%level synthesis (hls) tools [1] 
permit %%#%% synthesis %%#%% multi%%dsh%%threaded software %%#%% parallel 
hardware%%lst%% %%#%% concurrent software threads %%#%% realized %%#%% concurrently operating hardware units%%per%%]$~ ~$[a common performance bottleneck %%#%% %%#%% parallel implementation (whether %%#%% %%#%% hardware 
]v[ software) %%#%% memory bandwidth – parallel threads demand 
concurrent access %%#%% memory resulting %%#%% contention %%#%% hurts 
performance%%per%%]$~ ~$[fpgas contain %%#%% abundance %%#%% independently 
accessible memories offering %%#%% internal memory bandwidth%%per%%]$~ 
~$[we describe %%#%% approach ]f[ leveraging %%#%% bandwidth %%#%% 
%%#%% context %%#%% synthesizing parallel software %%#%% hardware%%per%%]$~ 
~$[our approach applies trace%%dsh%%based proﬁling %%#%% determine %%#%% 
%%#%% program’s arrays %%#%% %%#%% automatically partitioned %%#%% subarrays%%lst%% %%#%% %%#%% %%cmp_t%% implemented %%#%% separate on%%dsh%%chip ram 
blocks %%#%% %%#%% target fpga%%per%%]$~ ~$[the partitioning %%#%% accomplished 
%%#%% %%#%% %%#%% %%#%% requires %%#%% single hls execution ]^[ logic simulation ]f[ trace extraction%%per%%]$~ ~$[the %%#%% result %%#%% %%#%% %%#%% thread%%lst%% 
%%#%% implemented %%#%% hardware%%lst%% %%#%% exclusive access %%#%% %%#%% own 
memories %%#%% %%#%% extent possible%%lst%% signiﬁcantly reducing contention 
]^[ arbitration ]^[ %%#%% raising performance%%per%%]$~ 
~$[keywords—high%%dsh%%level synthesis%%lst%% memory architecture%%lst%% multithreaded hls%%per%%]$~ 
~$[i%%per%%]$~ 
~$[i ntroduction 
high%%dsh%%level synthesis (hls) %%#%% becoming %%#%% prevalent design 
methodology ]f[ fpgas [5]%%lst%% [11] %%#%% %%#%% introduction %%#%% 
tools %%#%% %%#%% vivado hls %%#%% xilinx [15] ]^[ altera’s 
opencl sdk [8]%%per%%]$~ ~$[hls %%#%% %%#%% active area %%#%% research %%#%% 
signiﬁcant effort %%#%% %%#%% towards closing %%#%% performance%%lst%% 
power ]^[ area gap %%#%% hls%%dsh%%generated hardware ]^[ 
human%%dsh%%expert%%dsh%%designed hardware%%per%%]$~ ~$[in %%#%% hardware computing 
system%%lst%% memory %%#%% %%#%% frequently occurring culprit ]f[ limited 
performance%%scn%% %%#%% is%%lst%% memory bandwidth ]^[ contention ]f[ 
memory %%#%% multiple accessors %%#%% common roots %%#%% limited computational throughput%%per%%]$~ ~$[processors%%lst%% ]^[ %%#%% software 
programs %%#%% run %%#%% them%%lst%% %%#%% typically based %%#%% %%#%% assumption %%#%% %%#%% single uniﬁed memory address space%%per%%]$~ ~$[fpgas%%lst%% %%#%% %%#%% 
%%#%% hand%%lst%% contain %%#%% %%#%% memories%%lst%% distributed spatially%%lst%% 
%%#%% %%#%% %%#%% %%#%% accessed concurrently%%per%%]$~ ~$[the 3 approaches ]f[ 
increasing memory bandwidth %%#%% i) memory replication%%lst%% ii) 
implementing multi%%dsh%%ported memories ]^[ iii) memory banking 
%%#%% partitioning%%per%%]$~ ~$[memory replication %%#%% incur %%#%% %%#%% 
area cost ]^[ %%#%% require %%#%% synchronization mechanism 
%%#%% multiple copies %%#%% %%#%% %%#%% memory unless %%#%% data %%#%% 
read%%dsh%%only%%per%%]$~ ~$[increasing %%#%% number %%#%% memory ports %%#%% expensive 
]^[ %%#%% ]n[ %%#%% %%#%% %%#%% %%#%% fpga %%#%% %%#%% block rams 
%%#%% limited port conﬁgurations%%per%%]$~ ~$[in %%#%% article%%lst%% %%#%% consider 
automated generation %%#%% banked on%%dsh%%chip memory architectures 
%%#%% %%#%% high%%dsh%%level synthesis %%#%% parallel software programs %%#%% 
parallel fpga hardware%%lst%% %%#%% %%#%% goal %%#%% reducing memory 
contention ]^[ raising bandwidth%%per%%]$~ 
~$[one %%#%% %%#%% primary aims %%#%% pursuing %%#%% hardware implementation vs%%per%% %%#%% software implementation %%#%% %%#%% exploit spatial 
parallelism %%#%% %%#%% hardware%%per%%]$~ ~$[towards this%%lst%% %%#%% modern highlevel synthesis (hls) tools%%lst%% %%#%% %%#%% %%#%% legup hls framework 
%%#%% %%#%% university %%#%% toronto%%lst%% provide spatial exploitation 
capability %%#%% %%#%% software%%dsh%%speciﬁcation stage %%#%% supporting 
%%#%% synthesis %%#%% parallel software (threads) %%#%% parallel hardware [2]%%per%%]$~ ~$[the parallel software threads %%#%% multi%%dsh%%threaded %%#%% 
programs written using %%#%% pthreads ]v[ openmp standards%%lst%% 
%%#%% realized %%#%% concurrently operating units %%#%% hardware%%per%%]$~ ~$[in 
%%#%% work%%lst%% %%#%% %%#%% concerned %%#%% %%#%% synthesis %%#%% memory 
architectures ]f[ %%#%% spatially parallel implementations%%lst%% %%#%% 
concurrently operating hardware units %%#%% vie ]f[ access %%#%% 
%%#%% %%#%% memory ports %%#%% %%#%% %%#%% time%%per%%]$~ ~$[we seek %%#%% alleviate %%#%% contention %%#%% automated synthesis %%#%% banked 
architectures %%#%% %%#%% hardware units %%#%% (partially) exclusive 
access %%#%% particular ports %%#%% %%#%% extent possible%%per%%]$~ 
~$[we implement %%#%% %%#%% %%#%% %%#%% legup hls framework 
%%#%% %%#%% pthreads/openmp parallel ﬂow%%per%%]$~ ~$[we ﬁrst augmented 
legup %%#%% user%%dsh%%constraint%%dsh%%driven array partitioning%%lst%% similar 
%%#%% %%#%% available %%#%% xilinx’s vivado hls tool%%per%%]$~ ~$[based %%#%% usersupplied directives%%lst%% %%#%% %%#%% functionality permits arrays %%#%% 
%%#%% partitioned %%#%% %%#%% variety %%#%% %%#%% %%#%% %%#%% %%#%% compiler%%lst%% 
%%#%% %%#%% partition %%#%% %%cmp_t%% implemented %%#%% separate rams 
%%#%% %%#%% fpga implementation%%per%%]$~ ~$[however%%lst%% %%#%% issues exist 
%%#%% %%#%% constraint%%dsh%%driven approach%%cln%% 1) %%#%% %%#%% %%#%% difﬁcult %%#%% 
know %%#%% style %%#%% array partitioning %%#%% %%#%% ]f[ %%#%% %%#%% array 
%%#%% %%#%% depends %%#%% %%#%% memory access patterns %%#%% %%#%% parallel 
program ]^[ %%#%% %%#%% architecture %%#%% %%#%% target fpga%%lst%% ]^[ 
2) specifying array partitioning directives %%#%% non%%dsh%%standard%%lst%% ]^[ 
%%#%% believe %%#%% %%#%% %%#%% particularly difﬁcult ]f[ software engineers 
%%#%% %%#%% knowledge %%#%% fpga hardware%%per%%]$~ 
~$[in light %%#%% %%#%% %%#%% issues%%lst%% %%#%% propose %%#%% memory%%dsh%%trace 
proﬁling%%dsh%%based approach %%#%% automatically determines array 
partitionings %%#%% realize banked memory architectures offering 
low memory contention ]^[ %%#%% bandwidth ]f[ parallel spatial 
hardware %%#%% produced %%#%% legup’s pthreads/openmp ﬂow%%per%%]$~ 
~$[an advantage %%#%% %%#%% proposed approach %%#%% %%#%% %%#%% requires %%#%% 
single hls execution ]^[ hardware simulation %%#%% %%#%% generated 
hardware %%#%% extract %%#%% memory access trace%%lst%% %%#%% opposed %%#%% 
%%#%% exhaustive approaches requiring %%#%% synthesis/simulation runs%%per%%]$~ ~$[speciﬁcally%%lst%% %%#%% %%#%% developed %%#%% memory%%dsh%%trace 
simulator %%#%% permits rapid evaluation %%#%% various memory 
partitioning schemes (banking architectures) using %%#%% single 
execution trace %%#%% %%#%% hardware %%#%% unpartitioned arrays 
%%#%% modeling contention ]^[ arbitration%%per%%]$~ 
~$[the key contributions %%#%% %%#%% paper are%%cln%% 
• 
• 
• 
• 
infrastructure ]f[ array partitioning implemented %%#%% 
%%#%% open%%dsh%%source legup%%dsh%%hls framework%%per%%]$~ 
~$[an automated trace%%dsh%%based array partition scheme detection approach using %%#%% lightweight memory simulator %%#%% %%#%% overall goal %%#%% reducing execution 
cycles %%#%% hls%%dsh%%generated hardware ]f[ multi%%dsh%%threaded 
software%%per%%]$~ 
~$[automated arbiter insertion ]^[ support ]f[ %%#%% 
%%#%% “exact” thread%%dsh%%driven partitioning %%#%% ]n[ possible%%lst%% ]f[ example%%lst%% ]f[ scenarios wherein %%#%% threads 
occasionally access %%#%% %%#%% ram%%per%%]$~ 
~$[an experimental study demonstrating %%#%% efﬁcacy %%#%% 
%%#%% automated partitioning technique %%#%% comparison 
%%#%% %%#%% brute%%dsh%%force approach%%per%%]$~ 
~$[ii%%per%%]$~ 
~$[background 
a%%per%%]$~ ~$[legup hls tool 
%%#%% legup hls tool %%#%% implemented %%#%% %%#%% opensource llvm compiler [9]%%per%%]$~ ~$[within llvm%%lst%% %%#%% program %%#%% 
represented %%#%% %%#%% compiler’s intermediate representation (ir)%%lst%% 
%%#%% resembles risc assembly code%%lst%% %%#%% composed %%#%% 
simple instructions %%#%% %%#%% multiply%%lst%% add%%lst%% branch%%lst%% jump%%lst%% etc%%per%%]$~ 
~$[prior %%#%% legup hls%%lst%% %%#%% program’s ir %%#%% subjected %%#%% llvm’s 
compiler optimization passes%%lst%% %%#%% %%#%% dead%%dsh%%code elimination%%lst%% 
loop rotation%%lst%% ]^[ common sub%%dsh%%expression elimination%%per%%]$~ ~$[legup 
takes %%#%% optimized ir %%#%% input ]^[ performs %%#%% traditional 
hls stages [6] %%#%% resource allocation%%lst%% scheduling%%lst%% binding 
]^[ verilog generation%%per%%]$~ ~$[in %%#%% work%%lst%% array partitioning ]f[ 
%%#%% purposes %%#%% banked memory architecture synthesis %%#%% 
implemented %%#%% %%#%% generic llvm optimization pass%%per%%]$~ ~$[as %%#%% 
%%#%% detailed below%%lst%% %%#%% original arrays %%#%% %%#%% ir %%#%% broken 
%%#%% pieces ]^[ array accesses %%#%% steered %%#%% %%#%% appropriate 
sub%%dsh%%array%%per%%]$~ 
~$[b%%per%%]$~ ~$[synthesis %%#%% parallel software %%#%% hardware 
%%#%% legup’s pthreads synthesis ﬂow%%lst%% multi%%dsh%%threaded software %%#%% synthesized %%#%% parallel hardware %%#%% behaviour 
closely matches %%#%% software semantics%%per%%]$~ ~$[each software thread 
%%#%% synthesized %%#%% %%#%% instance %%#%% %%#%% hardware unit%%per%%]$~ ~$[pthreads 
library function calls %%#%% %%#%% original %%#%% program %%#%% replaced 
%%#%% legup%%dsh%%speciﬁc wrapper functions %%#%% cause speciﬁc 
hardware structures %%#%% %%#%% produced %%#%% %%#%% rtl generation 
phase%%per%%]$~ ~$[for example%%lst%% calls %%#%% pthread_create %%#%% translated %%#%% fsm functionality %%#%% invokes %%#%% hardware unit 
corresponding %%#%% %%#%% software thread%%per%%]$~ ~$[support %%#%% provided ]f[ 
common thread synchronization approaches including mutexs 
(for critical sections) ]^[ barriers%%per%%]$~ ~$[ultimately%%lst%% %%#%% pthreads 
ﬂow permits %%#%% wide range %%#%% spatial parallel implementations 
%%#%% %%#%% realized %%#%% software changes alone%%per%%]$~ ~$[the %%#%% 
reader %%#%% referred %%#%% [2]%%lst%% [3] ]f[ complete details%%per%%]$~ ~$[our %%#%% 
%%#%% seeks %%#%% alleviate %%#%% speciﬁc (and common) performance 
bottleneck %%#%% %%#%% parallel hardware%%lst%% namely%%lst%% %%#%% multiple 
parallel hardware units contend ]f[ memory%%per%%]$~ 
~$[c%%per%%]$~ ~$[legup’s memory architecture 
legup hls implements %%#%% array structure %%#%% %%#%% separate 
logical ram%%per%%]$~ ~$[depending %%#%% %%#%% size%%lst%% %%#%% logical ram %%#%% %%#%% 
implemented %%#%% multiple physical block rams %%#%% %%#%% fpga 
implementation (e%%per%%g%%per%% %%#%% %%#%% array size exceeds %%#%% sram 
block size %%#%% %%#%% fpga fabric)%%per%%]$~ ~$[for rams %%#%% %%#%% %%#%% accessed concurrently %%#%% parallel hardware%%lst%% legup automatically 
inserts arbitration circuitry%%per%%]$~ ~$[the arbiter permits single%%dsh%%cycle 
access %%#%% %%#%% absence %%#%% contention%%per%%]$~ ~$[under contention%%lst%% %%#%% %%#%% 
resolved %%#%% %%#%% round%%dsh%%robin style%%lst%% %%#%% %%#%% %%#%% %%#%% hardware unit 
%%#%% stall %%#%% %%#%% %%#%% granted access%%lst%% degrading performance%%per%%]$~ 
~$[such degradation %%#%% particularly common %%#%% %%#%% pthreads 
synthesis ﬂow%%per%%]$~ 
~$[consider%%lst%% ]f[ example%%lst%% parallelized vector addition%%lst%% %%#%% = 
%%#%% + b%%lst%% %%#%% z%%lst%% a%%lst%% %%#%% %%#%% n%%dsh%%element arrays%%per%%]$~ ~$[in %%#%% typical 
multi%%dsh%%threaded implementation%%lst%% %%#%% thread %%#%% operate %%#%% 
%%#%% portion %%#%% %%#%% original arrays%%per%%]$~ ~$[with %%#%% threads implemented %%#%% 
%%#%% parallel hardware units %%#%% %%#%% %%#%% signiﬁcant contention 
%%#%% %%#%% ports %%#%% rams holding %%#%% arrays%%lst%% %%#%% %%cmp_if%% %%#%% rams 
%%#%% %%#%% dual%%dsh%%port mode%%per%%]$~ 
~$[legup %%#%% “points%%dsh%%to” analysis %%#%% llvm %%#%% designate arrays %%#%% %%#%% local%%lst%% shared%%dsh%%local ]v[ global [3]%%per%%]$~ ~$[local arrays %%#%% 
accessed %%#%% %%#%% single function %%#%% %%#%% %%#%% code%%per%%]$~ ~$[shared%%dsh%%local arrays 
%%#%% accessed %%#%% %%#%% limited number %%#%% functions%%lst%% %%#%% determined 
statically %%#%% compile time%%per%%]$~ ~$[for arrays designated %%#%% global%%lst%% 
%%#%% points%%dsh%%to analysis %%#%% unable %%#%% statically determine %%#%% 
accessors%%per%%]$~ ~$[in hardware%%lst%% %%#%% arrays %%#%% implemented %%#%% 
%%#%% global memory controller %%#%% %%#%% %%#%% unique tag ]f[ %%#%% 
array %%#%% steer accesses %%#%% %%#%% correct sram block containing 
%%#%% array [1]%%per%%]$~ ~$[for %%#%% work%%lst%% %%#%% focus %%#%% shared%%dsh%%local arrays 
%%#%% global memory requests %%#%% %%#%% parallelized due %%#%% %%#%% 
memory controller ]^[ local memory %%#%% %%#%% scheduled %%#%% 
%%#%% %%#%% avoid port contentions%%per%%]$~ 
~$[iii%%per%%]$~ 
~$[r elated %%#%% ork 
%%#%% number %%#%% recent %%#%% %%#%% considered memory banking %%#%% hls%%per%%]$~ ~$[below %%#%% highlight %%#%% %%#%% believe %%#%% %%#%% relevant %%#%% %%#%% %%#%% research%%per%%]$~ ~$[however%%lst%% %%#%% %%#%% distinction 
%%#%% %%#%% %%#%% %%#%% %%#%% focus %%#%% %%#%% memory architecture synthesis 
%%#%% %%#%% multi%%dsh%%thread hls context%%per%%]$~ ~$[our technique speciﬁcally 
targets %%#%% synthesis %%#%% banked architectures %%#%% result %%#%% 
reduced contention %%#%% %%#%% hardware implementation %%#%% 
parallel software%%per%%]$~ ~$[to %%#%% authors’ knowledge%%lst%% %%#%% prior %%#%% 
%%#%% considered %%#%% scenario%%per%%]$~ 
~$[as %%#%% %%#%% %%#%% work%%lst%% %%#%% recent %%#%% %%#%% zhou et 
al%%per%% [16] applied %%#%% trace%%dsh%%based approach %%#%% memory banking ]^[ employed %%#%% conﬂict%%dsh%%graph%%dsh%%based approach %%#%% map 
memory addresses %%#%% banks%%lst%% %%#%% emphasis %%#%% multiplexer 
size minimization%%per%%]$~ ~$[formal techniques %%#%% %%#%% %%#%% verify %%#%% 
mapping %%#%% indeed conﬂict free%%per%%]$~ ~$[as opposed %%#%% %%#%% approach%%lst%% 
%%#%% chooses %%#%% architecture %%#%% %%#%% trace%%lst%% [16] requires 
%%#%% number %%#%% banks %%#%% %%#%% input %%#%% %%#%% algorithm%%lst%% ]^[ solely 
handles %%#%% conﬂict%%dsh%%free %%#%% (there %%#%% %%#%% arbitration)%%per%%]$~ 
~$[other %%#%% include [4] %%#%% applies mathematical techniques %%#%% %%#%% memory partitioning problem%%per%%]$~ ~$[a polyhedral 
model %%#%% %%#%% %%#%% represent memory access patterns %%#%% loops 
]^[ legal code transformations%%lst%% ]^[ %%#%% integer lattice approach 
%%#%% %%#%% ]f[ memory partitioning%%lst%% %%#%% %%#%% objective %%#%% to%%cln%% 1) 
minimize contention%%lst%% ]^[ 2) reduce “waste” (unused portions 
%%#%% %%#%% partitions)%%per%% [10] targets accesses %%#%% multi%%dsh%%dimensional arrays %%#%% loop bodies ]^[ proposed %%#%% closed%%dsh%%form linear mapping 
%%#%% array accesses %%#%% bank indices %%#%% achieve zero conﬂicts 
(and ii=1 ]f[ loop pipelining)%%scn%% subsequent optimizations %%cmp_t%% 
b%%per%%]$~ ~$[partitioning implementation 
(a) complete 
(b) block 
(c) cyclic 
(d) block cyclic 
fig%%per%% 1%%cln%% partitioning schemes applied %%#%% 10×10 matrix %%#%% %%#%% 
row dimension%%per%% 
reduce %%#%% bank count ]^[ space wastage%%per%% [13] ]^[ [12] %%#%% 
static analyses %%#%% look ]f[ hyperplanes %%#%% memory accesses 
%%#%% loop bodies%%per%%]$~ ~$[the hyperplanes %%#%% described %%#%% %%#%% vector 
]^[ %%#%% linear transformation translates %%#%% accesses %%#%% %%#%% 
original multi%%dsh%%dimensional array %%#%% accesses %%#%% %%#%% newly 
partitioned banks%%per%%]$~ ~$[however%%lst%% [7] %%#%% %%#%% %%#%% hyperplane 
solution %%#%% ]n[ %%#%% %%#%% due %%#%% %%#%% phenomenon known 
%%#%% bank switching%%lst%% wherein %%#%% output %%#%% %%#%% bank %%#%% 
%%#%% required %%#%% multiple hardware accessors%%per%%]$~ ~$[again%%lst%% %%#%% 
%%#%% %%#%% ]n[ centered %%#%% multi%%dsh%%threaded software%%lst%% ]b[ rather%%lst%% 
partitioning %%#%% arrays accessed multiple times %%#%% %%#%% loop body%%per%%]$~ 
~$[the application %%#%% geometric (e%%per%%g%%per%% polyhedral) representations %%#%% memory accesses %%#%% %%#%% loop body %%#%% %%#%% memory 
architecture synthesis problem %%#%% ]n[ directly transferable %%#%% 
%%#%% related problem %%#%% %%#%% multi%%dsh%%thread memory contention 
context%%per%%]$~ ~$[the static approaches %%#%% focus %%#%% ﬁnding 
conﬂict%%dsh%%free mappings%%lst%% however%%lst%% %%#%% approach allows ]f[ nonperfect partitions%%per%%]$~ 
~$[iv%%per%%]$~ 
~$[a rray partitioning %%#%% mplementation 
memory partitioning %%#%% implemented %%#%% %%#%% compiler pass 
%%#%% llvm%%lst%% %%#%% %%#%% input %%#%% %%#%% original ir ]^[ %%#%% produced 
ir %%#%% changed %%#%% %%#%% memory accesses %%#%% %%#%% affected arrays 
%%#%% modiﬁed %%#%% access %%#%% %%#%% sub%%dsh%%arrays%%per%%]$~ ~$[the pass takes 
advantage %%#%% %%#%% predicated load/store operations supported %%#%% 
legup%%per%%]$~ ~$[predicated loads/stores %%#%% %%#%% regular load/store 
instructions %%#%% %%#%% %%#%% memory enable signal %%#%% %%#%% %%#%% %%#%% 
fsm%%dsh%%state dependent%%lst%% ]b[ %%#%% dependent %%#%% %%#%% precomputed 
predicate signal%%per%%]$~ ~$[predicates %%#%% typically %%#%% true/false outcome 
%%#%% %%#%% comparison%%per%%]$~ ~$[leveraging %%#%% predicated load/store%%lst%% %%#%% 
array partitioning pass can%%lst%% ]f[ %%#%% memory access %%#%% %%#%% 
partitioned array%%lst%% create multiple predicated memory instructions ]f[ %%#%% newly created partition%%lst%% %%#%% %%#%% predicate 
%%#%% %%#%% %%cmp%% instruction %%#%% %%#%% original index%%per%%]$~ ~$[the %%cmp%% 
instruction (icmp eq) %%#%% evaluate %%#%% true %%#%% ]f[ %%#%% %%#%% 
%%#%% instructions %%#%% run%%dsh%%time%%per%%]$~ ~$[therefore%%lst%% %%#%% array partitioning 
transformation %%#%% ]n[ require extra memory bandwidth%%per%%]$~ 
~$[it %%#%% worthwhile %%#%% explain %%#%% detailed behavior surrounding predicated memory accesses%%lst%% arbitration%%lst%% ]^[ partitioning%%per%%]$~ 
~$[consider %%#%% four%%dsh%%thread program%%lst%% %%#%% initially %%#%% threads 
access %%#%% single array%%per%%]$~ ~$[when synthesized %%#%% hardware%%lst%% contention ]^[ delays due %%#%% arbitration %%#%% arise %%cmp_b%% %%#%% 
array%%lst%% implemented %%#%% %%#%% logical ram %%#%% %%#%% fpga%%lst%% %%#%% %%#%% 
accessors ]^[ %%#%% %%#%% %%#%% ports%%per%%]$~ 
~$[to resolve %%#%% contention%%lst%% assume %%#%% array %%#%% partitioned 
%%#%% %%#%% pieces%%lst%% %%#%% %%#%% thread accesses %%#%% partitions %%#%% %%#%% 
near%%dsh%%exclusive fashion%%lst%% ]f[ example%%lst%% %%#%% thread accesses %%#%% 
partition 95% %%#%% %%#%% time%%lst%% ]b[ 5% %%#%% %%#%% time accesses %%#%% 
%%#%% %%#%% %%#%% %%#%% partitions%%per%%]$~ ~$[in %%#%% %%#%% scenario%%lst%% %%#%% hardware 
implementation %%#%% %%#%% thread %%#%% indeed issue %%#%% predicated 
access %%#%% %%#%% %%#%% partitions%%scn%% however%%lst%% %%#%% %%#%% %%#%% %%#%% access ]f[ 
%%#%% %%#%% predicate %%#%% true %%#%% %%#%% sent %%#%% %%#%% arbiter%%per%%]$~ ~$[that 
is%%lst%% %%#%% accesses associated %%#%% false predicates %%#%% ]n[ create 
contention %%#%% %%#%% implementation%%per%%]$~ 
~$[a%%per%%]$~ ~$[available partitioning schemes 
%%#%% %%#%% 4 supported partitioning schemes ]f[ multidimensional arrays%%cln%% complete%%lst%% block%%lst%% cyclic%%lst%% ]^[ block cyclic 
shown %%#%% fig%%per%% 1%%per%%]$~ ~$[these %%#%% similar %%#%% %%#%% schemes %%#%% %%#%% 
supported %%#%% vivado hls%%per%%]$~ ~$[in %%#%% complete scheme%%lst%% %%#%% array 
element %%#%% designated %%#%% %%#%% separate partition%%per%%]$~ ~$[in %%#%% block 
scheme%%lst%% partitions represent contiguous pieces %%#%% %%#%% original 
array%%per%%]$~ ~$[the cyclic scheme %%#%% %%#%% interleaved approach%%lst%% %%#%% 
array elements %%#%% ﬁxed distance apart %%#%% allocated %%#%% %%#%% %%#%% 
partition%%per%%]$~ ~$[block cyclic combines %%#%% block ]^[ cyclic schemes%%per%%]$~ 
~$[partitioning %%#%% available %%#%% %%#%% single dimension %%#%% %%#%% multidimensional array%%per%%]$~ ~$[for %%#%% purposes %%#%% %%#%% work%%lst%% %%#%% focus %%#%% 
%%#%% globally declared data structures – i%%per%%e%%per%% %%#%% %%#%% %%#%% ]n[ 
locally scoped ]^[ %%cmp_tf%%%%lst%% %%#%% %%#%% shared %%#%% multiple 
functions ]v[ threads %%#%% %%#%% %%#%% function%%per%%]$~ 
~$[the speciﬁc partitioning scheme %%#%% based %%#%% %%#%% terms%%cln%% 
• 
• 
• 
number %%#%% partitions (n)%%cln%% number %%#%% total partitions 
%%#%% %%#%% created%%per%%]$~ 
~$[block size (b)%%cln%% size %%#%% contiguous elements %%#%% %%#%% 
dimension %%#%% partitioning %%#%% constitute %%#%% partition%%per%%]$~ 
~$[size (s)%%cln%% number %%#%% elements %%#%% %%#%% multidimensional array %%#%% %%#%% dimension %%#%% %%#%% partitioning%%per%%]$~ 
~$[c%%per%%]$~ ~$[limit %%#%% power%%dsh%%of%%dsh%%2 partitions 
%%#%% order %%#%% access %%#%% memory location %%#%% %%#%% newly partitioned memory scheme%%lst%% %%#%% %%#%% access %%#%% require %%#%% 
%%#%% %%#%% partition number%%lst%% %%#%% %%#%% %%#%% %%#%% %%#%% index %%#%% %%#%% 
partition %%#%% memory location %%#%% resides%%per%%]$~ ~$[the equation %%#%% 
determine %%#%% %%#%% partition number%%lst%% pd %%lst%% is%%cln%% 
pd = id / b % %%#%% 
(1) 
%%#%% id %%#%% %%#%% index %%#%% %%#%% access %%#%% %%#%% dimension %%#%% 
partitioning%%lst%% d%%scn%% %%#%% %%#%% %%#%% block size ]^[ %%#%% %%#%% %%#%% number %%#%% 
partitions%%per%%]$~ 
~$[the equation %%#%% compute %%#%% %%#%% index%%lst%% %%#%% id %%lst%% %%#%% %%#%% 
partition is%%cln%% 
%%#%% id = (id % b) + id / (b × n) × %%#%% 
(2) 
%%#%% indices %%#%% %%#%% %%#%% dimensions %%#%% %%#%% array remain 
unchanged %%#%% %%#%% %%#%% dimensions %%#%% ]n[ partitioned%%per%%]$~ 
~$[the %%#%% equations hold ]f[ %%#%% %%#%% %%#%% %%#%% block 
cyclic partitioning%%per%%]$~ ~$[they %%#%% %%#%% simpliﬁed %%#%% %%#%% %%#%% %%#%% 
complete%%lst%% block%%lst%% ]^[ cyclic%%per%%]$~ ~$[for example%%lst%% notice %%#%% %%#%% %%#%% 
%%#%% %%#%% complete partitioning%%lst%% %%#%% %%#%% 1 ]^[ %%#%% %%#%% s%%lst%% %%#%% size %%#%% %%#%% 
scheme 
complete 
block 
number partitions 
ncmp = {n|n = s} 
nb = {n|1 < %%#%% < s} 
nc = {n|1 < %%#%% < s%%lst%% %%#%% ∈ 
{2i |i ∈ n}} 
nbc = {n|1 < %%#%% < s%%lst%% %%#%% ∈ 
{2i |i ∈ n}} 
cyclic 
block 
cyclic 
block size 
bcmp = {b|b = 1} 
bb = {b|1 < %%#%% < s%%lst%% %%#%% ∈ 
{2i |i ∈ n}} 
bc = {b|b = 1} 
cycle 
0 
1 
2 
3 
4 
bbc = {b|1 < %%#%% < s%%lst%% %%#%% ∈ 
{2i |i ∈ n}} 
table i%%cln%% partition conﬁguration set %%#%% allowable value ranges 
]f[ number %%#%% partition%%lst%% ]^[ block size parameters%%per%% 
array %%#%% dimension %%#%% %%#%% complete partitioning%%per%%]$~ ~$[therefore%%lst%% %%#%% 
equation %%#%% determine %%#%% %%#%% partition number %%#%% simply%%lst%% 
%%#%% %%#%% = id 
(3) 
]^[ %%#%% %%#%% index %%#%% simply equal %%#%% 0%%per%%]$~ 
~$[observe %%#%% %%#%% %%#%% equations heavily rely %%#%% %%#%% division ]^[ modulo operators%%per%%]$~ ~$[these operations %%#%% potentially 
costly %%#%% %%#%% %%#%% performance ]^[ area perspectives %%#%% 
legup%%dsh%%generated hardware%%per%%]$~ ~$[for example%%lst%% %%#%% %%#%% division/modulo module legup instantiates%%lst%% %%#%% number %%#%% cycles 
required %%#%% proportional %%#%% %%#%% bitwidths %%#%% %%#%% division/modulo 
operands%%per%%]$~ ~$[this implies %%#%% %%#%% cycle%%dsh%%count penalty incurred %%#%% 
compute partition number ]^[ index %%#%% override %%#%% cyclecount reduction afforded %%#%% partitioning %%#%% %%#%% ﬁrst place%%per%%]$~ 
~$[consequently%%lst%% %%#%% limit %%#%% solution space %%#%% %%#%% %%#%% 
division operations %%#%% %%#%% substituted %%#%% %%#%% shift operations 
]^[ %%#%% modulo operations %%#%% %%#%% substituted %%#%% bit%%dsh%%wise 
logical%%dsh%%and operations%%lst%% %%#%% %%#%% %%#%% trivial %%#%% hardware%%per%%]$~ 
~$[table %%#%% %%#%% %%#%% values %%#%% %%#%% ]^[ %%#%% %%#%% %%#%% partitioning 
scheme allows%%per%%]$~ ~$[there %%#%% %%#%% %%#%% %%#%% setting ]f[ complete 
partitioning%%per%%]$~ ~$[in block partitioning%%lst%% %%#%% %%#%% %%#%% %%#%% integer 
value %%#%% %%cmp_ta%% 1 ]^[ less %%cmp_ta%% %%#%% number %%#%% partitions ]^[ 
%%#%% block size %%#%% %%#%% %%#%% power %%#%% 2 value %%#%% %%cmp_ta%% 1 ]^[ 
less %%cmp_ta%% s%%lst%% %%#%% %%#%% %%#%% %%#%% size %%#%% %%#%% array %%#%% %%#%% dimension 
%%#%% partitioning%%per%%]$~ ~$[in cyclic partitioning%%lst%% %%#%% %%#%% %%#%% power %%#%% 2 
number %%#%% partitions %%#%% %%#%% %%#%% %%cmp_ta%% 1 ]^[ less %%cmp_ta%% %%#%% 
]^[ %%#%% block size %%#%% 1%%per%%]$~ ~$[in block cyclic partitioning%%lst%% %%#%% %%#%% 
%%#%% %%#%% number %%#%% partitions ]^[ block size %%#%% %%#%% %%#%% 
power%%dsh%%of%%dsh%%2 integers %%#%% %%cmp_ta%% 1 ]^[ less %%cmp_ta%% s%%per%%]$~ ~$[section v%%dsh%%d 
%%#%% %%#%% solution space ]f[ %%#%% %%#%% multi%%dsh%%dimensional 
array%%per%%]$~ 
~$[v%%per%%]$~ 
~$[automatic %%#%% rray partitioning 
a%%per%%]$~ ~$[overview 
%%#%% %%#%% %%#%% level%%lst%% %%#%% automated array partitioning %%#%% implemented %%#%% follows%%cln%% first%%lst%% %%#%% multi%%dsh%%threaded software program%%lst%% 
%%#%% %%#%% partitioning applied%%lst%% %%#%% synthesized %%#%% hardware 
using legup hls%%per%%]$~ ~$[the generated rtl %%#%% %%cmp_t%% simulated %%#%% 
modelsim %%#%% typical input vectors%%lst%% ]^[ %%#%% memory access 
trace %%#%% extracted%%lst%% where%%lst%% ]f[ %%#%% array/memory access%%lst%% %%#%% 
address ]^[ %%#%% id %%#%% %%#%% thread %%#%% %%#%% access %%#%% tracked%%per%%]$~ 
~$[following %%#%% trace generation%%lst%% %%#%% trace itself%%lst%% %%#%% %%#%% %%#%% 
%%#%% hypothetical array partitioning scheme %%#%% inputted %%#%% %%#%% 
memory simulator%%lst%% which%%lst%% ]f[ %%#%% proposed scheme%%lst%% estimates 
%%#%% performance beneﬁts%%per%%]$~ ~$[with %%#%% single hls execution ]^[ 
trace generation%%lst%% %%#%% %%#%% able %%#%% assess %%#%% consequences %%#%% 
various partitioning schemes%%per%%]$~ ~$[and%%lst%% %%#%% simulating %%#%% variety %%#%% 
%%#%% partitioning schemes%%lst%% %%#%% optimal memory banking 
architecture %%#%% %%#%% determined%%per%%]$~ ~$[we elaborate %%#%% %%#%% steps %%#%% 
%%#%% subsections below%%per%%]$~ 
~$[thread 0 
access 0 
access 1 
access 1 
thread 1 
access 3 
access 3 
access 4 
access 4 
access 2 
(a) thread access schedule 
thread 0 
access 0 
thread 1 
access 3 
distance%%cln%% 1 
access 1 
distance%%cln%% 1 
access 4 
distance%%cln%% 2 
access 2 
(b) memory access chain 
fig%%per%% 2%%cln%% memory access schedule %%#%% 2 threaded execution %%#%% 
memory access chain%%per%%]$~ 
~$[b%%per%%]$~ ~$[memory trace collection 
%%#%% modiﬁed %%#%% rtl%%dsh%%generation %%#%% %%#%% legup hls tool 
%%#%% produce %%#%% relevant trace data %%#%% modelsim simulation%%per%%]$~ 
~$[speciﬁcally%%lst%% %%#%% $display statement %%#%% inserted whenever %%#%% 
request %%#%% %%#%% %%#%% %%#%% shared memory %%#%% %%#%% %%#%% %%#%% easily 
detected %%#%% %%#%% request_in vector %%#%% %%#%% associated 
arbiter%%per%%]$~ ~$[the information attached %%#%% %%#%% shared memory 
request %%#%% %%#%% cycle %%#%% %%#%% initial request%%lst%% %%#%% speciﬁc block 
ram %%#%% requested%%lst%% %%#%% port name%%lst%% %%#%% function trying %%#%% 
access %%#%% ram%%lst%% %%#%% instance number %%#%% %%#%% %%#%% %%#%% multithreaded functions%%lst%% ]^[ %%#%% address %%#%% %%#%% request %%#%% %%#%% %%#%% 
later ]f[ determining %%#%% partition schemes%%per%%]$~ 
~$[c%%per%%]$~ ~$[memory partitioning simulator 
%%#%% memory simulator %%#%% %%#%% program %%#%% aims %%#%% model 
%%#%% arbitration %%#%% requests %%#%% %%#%% particular port %%#%% %%#%% speciﬁc block 
ram%%per%%]$~ ~$[the program %%#%% written using python%%per%%]$~ ~$[the simulator 
will%%lst%% based %%#%% %%#%% partitioning scheme ]^[ %%#%% input memory 
trace collected %%#%% %%#%% unpartitioned execution%%lst%% determine 
%%#%% number %%#%% port contentions %%#%% %%#%% occur%%lst%% %%#%% %%#%% %%#%% 
%%#%% cycle number %%#%% %%#%% %%#%% last memory request %%#%% %%#%% 
serviced%%per%%]$~ 
~$[the program ﬁrst creates %%#%% representation %%#%% %%#%% unpartitioned execution memory accesses %%#%% %%#%% chain %%#%% nodes %%#%% 
%%#%% %%#%% node represents %%#%% memory access ]^[ %%#%% edge 
weights %%#%% %%#%% nodes represent %%#%% distance%%lst%% i%%per%%e%%per%% %%#%% 
intrinsic number %%#%% cycles %%#%% accesses%%per%%]$~ ~$[the distance %%#%% 
]n[ %%#%% %%#%% %%#%% %%#%% %%#%% number %%#%% cycles %%#%% accesses 
%%#%% %%#%% execution trace %%#%% %%#%% trace captures cycles lost %%#%% 
contention%%per%%]$~ ~$[fig%%per%% 2 %%#%% %%#%% series %%#%% scheduled accesses ]f[ 
%%#%% program running 2 threads%%lst%% %%#%% %%#%% %%#%% %%#%% memory access 
chains %%#%% %%#%% created %%#%% %%#%% memory trace%%per%%]$~ ~$[the boxed 
accesses represent %%#%% requests granted %%#%% %%#%% cycle%%lst%% %%#%% %%#%% 
unboxed accesses represent %%#%% accesses %%#%% stalled due %%#%% 
contention%%per%%]$~ ~$[as seen here%%lst%% %%#%% cycle difference %%#%% %%#%% 
access 0 %%#%% granted ]^[ %%#%% access 1 %%#%% granted %%#%% 2%%per%%]$~ ~$[however%%lst%% 
%%#%% distance %%#%% measure 1 cycle%%lst%% %%cmp_b%% %%#%% distance captures 
%%#%% number %%#%% cycles %%#%% accesses %%#%% %%#%% absence %%#%% 
contention%%per%%]$~ 
~$[once %%#%% memory access chain %%#%% gathered%%lst%% %%#%% simulator 
%%#%% “execute” %%#%% trace%%lst%% %%#%% %%#%% memory accesses %%#%% 
scheduled according %%#%% %%#%% partitioning scheme %%#%% test%%lst%% 
%%#%% %%#%% know %%#%% order %%#%% %%#%% memory accesses %%#%% %%#%% 
requester%%lst%% %%#%% %%#%% %%#%% %%#%% speciﬁc addresses %%#%% accessed%%lst%% 
%%#%% %%#%% tell %%#%% %%#%% partition %%#%% access %%#%% belong to%%per%%]$~ 
~$[the simulator %%#%% %%#%% in%%dsh%%memory model %%#%% %%#%% round%%dsh%%robin 
arbiter instantiated %%#%% legup ]^[ %%cmp_tf%%%%lst%% %%#%% %%#%% able %%#%% assess 
cycles lost %%#%% contention%%lst%% i%%per%%e%%per%% %%#%% requester waiting ]f[ %%#%% “grant” 
%%#%% %%#%% arbiter%%per%%]$~ 
~$[listing 1 %%#%% pseudocode ]f[ simulating %%#%% scheduling 
%%#%% %%#%% memory access trace ]f[ %%#%% particular array partitioning 
conﬁguration%%lst%% partitionconfig%%per%%]$~ ~$[our approach bears similarity %%#%% event%%dsh%%driven logic simulation%%per%%]$~ ~$[here%%lst%% setq %%#%% %%#%% set %%#%% 
queues%%cln%% %%#%% ]f[ %%#%% arbiter %%#%% %%#%% partitioning scheme %%#%% 
simulated%%per%%]$~ ~$[each queue stores %%#%% pending memory requests 
]f[ %%#%% port %%#%% %%#%% memory bank%%per%%]$~ ~$[initially%%lst%% %%#%% arbiter queues %%#%% 
initialized %%#%% empty%%per%%]$~ 
~$[listing 1%%cln%% algorithm ]f[ simulating %%#%% memory partitioning 
scheme 
1 
2 
3 
4 
5 
6 
7 
8 
9 
10 
11 
12 
13 
14 
15 
16 
17 
18 
19 
setq %%cln%% %%#%% %%#%% %%#%% %%#%% %%#%% %%#%% %%#%% pending %%#%% %%#%% %%#%% %%#%% %%#%% %%#%% %%#%% %%#%% %%#%% %%#%% %%#%% %%#%% %%#%% %%#%% %%#%% %%#%% %%#%% %%#%% %%#%% 
%%#%% %%cln%% memory %%#%% %%#%% %%#%% %%#%% %%#%% 
%%#%% %%#%% %%#%% %%#%% %%#%% %%#%% setq { 
%%#%% = {} 
} 
cycle = %%#%% %%#%% %%#%% %%#%% %%#%% access cycle %%#%% %%#%% 
%%#%% %%#%% %%#%% l %%#%% ( ! %%#%% ) { 
%%#%% = %%#%% %%#%% %%#%% %%#%% 
%%#%% %%#%% %%#%% %%#%% %%#%% %%#%% setq { 
%%#%% %%#%% %%#%% %%#%% l %%#%% %%#%% %%#%% %%#%% (q%%lst%% %%#%% %%#%% %%#%% %%#%% %%#%% %%#%% %%#%% %%#%% %%#%% %%#%% %%#%% %%#%% %%#%% %%#%% %%#%% %%lst%% %%#%% %%#%% %%#%% l %%#%% %%lst%% %%#%% ) 
%%#%% %%#%% %%#%% %%#%% %%#%% %%#%% %%#%% %%#%% %%#%% %%#%% l %%#%% (q) 
} 
%%#%% %%#%% %%#%% l %%#%% ++ 
%%#%% %%#%% %%#%% %%#%% %%#%% %%#%% setq { 
%%#%% %%#%% %%#%% ! empty | | %%#%% %%#%% %%#%% %%#%% %%#%% %%#%% %%#%% %%#%% %%#%% %%#%% %%#%% { 
%%#%% = %%#%% %%#%% l %%#%% %%#%% 
} 
} 
} 
%%#%% commence simulation %%#%% %%#%% cycle %%#%% %%#%% ﬁrst memory 
access (line 6) ]^[ enter %%#%% %%#%% loop (line 7)%%per%%]$~ ~$[for 
%%#%% arbiter %%#%% %%#%% %%#%% design (line 9)%%lst%% %%#%% speciﬁed %%#%% 
partitionconfig%%lst%% %%#%% %%#%% %%#%% %%#%% cycle%%lst%% %%#%% %%#%% %%#%% %%#%% 
trace %%#%% %%#%% populate %%#%% queue %%#%% active requests (line 10)%%per%%]$~ 
~$[the populateq function (not shown) takes accesses %%#%% 
%%#%% trace %%#%% %%#%% occur %%#%% time cycle%%lst%% ]^[ ]f[ %%#%% %%#%% 
access%%lst%% %%#%% knowledge %%#%% %%#%% partitioning scheme %%#%% create 
%%#%% request %%#%% %%#%% speciﬁc queue%%per%%]$~ ~$[then%%lst%% %%#%% executecycle 
function (line 11) %%#%% %%#%% internal arbiter model %%#%% determine 
%%#%% request %%#%% %%#%% queue %%#%% %%#%% receive %%#%% grant%%scn%% %%#%% 
request %%#%% removed %%#%% %%#%% queue%%per%%]$~ ~$[this process continues 
%%#%% %%#%% %%#%% %%#%% %%#%% requests outstanding %%#%% %%#%% arbiterrequest queues ]^[ %%#%% %%#%% trace %%#%% empty (line 15)%%per%%]$~ ~$[upon 
termination%%lst%% %%#%% cycle variable holds %%#%% cycle index %%#%% 
%%#%% last%%dsh%%serviced memory request%%per%%]$~ ~$[partitioning schemes %%#%% 
reduce %%#%% quantity %%#%% %%#%% desirable%%per%%]$~ 
~$[d%%per%%]$~ ~$[finding %%#%% optimal solution 
%%#%% %%#%% %%#%% brute%%dsh%%force approach %%#%% ﬁnding %%#%% optimal partitioning solution%%per%%]$~ ~$[this means %%#%% iterate %%#%% %%#%% %%#%% %%#%% 
partitioning schemes1 %%lst%% %%#%% predicting %%#%% number %%#%% cycles 
%%#%% %%#%% order %%#%% complete %%#%% %%#%% memory accesses collected 
%%#%% %%#%% trace%%lst%% %%#%% %%#%% %%#%% %%#%% number %%#%% cycles associated %%#%% 
stalls due %%#%% memory contention%%per%%]$~ 
~$[to provide insight %%#%% %%#%% size %%#%% %%#%% solution space%%lst%% %%#%% 
total number %%#%% partitioning schemes %%#%% %%#%% %%#%% applied %%#%% 
%%#%% multi%%dsh%%dimensional array is%%cln%% 
%%#%% %%#%% mtotal = %%#%% %%#%% mb + %%#%% %%#%% mc + %%#%% %%#%% mcmp + %%#%% %%#%% mbc (4) 
%%#%% %%#%% %%#%% mb %%lst%% %%#%% %%#%% mc %%lst%% %%#%% %%#%% mcmp %%lst%% ]^[ %%#%% %%#%% mbc represent %%#%% 
number %%#%% solutions ]f[ block%%lst%% cyclic%%lst%% complete%%lst%% ]^[ block 
1 %%#%% ignore schemes %%#%% %%#%% trivially non%%dsh%%optimal ]^[ %%#%% warrant %%#%% 
%%#%% analysis%%lst%% e%%per%%g%%per%% %%#%% %%#%% number %%#%% partitions %%#%% exceeds %%#%% number 
%%#%% threads%%per%% 
cyclic partitioning%%lst%% respectively%%per%%]$~ ~$[we note that%%cln%% 
%%#%% %%#%% mcmp = %%#%% 
(5) 
%%#%% %%#%% %%#%% %%#%% number %%#%% dimensions %%#%% %%#%% multi%%dsh%%dimensional 
array%%scn%% %%#%% is%%lst%% ]f[ %%#%% array dimension%%lst%% %%#%% %%#%% %%#%% single 
complete partitioning%%per%%]$~ ~$[we %%#%% %%#%% %%#%% deﬁne %%#%% function Φ 
%%#%% ﬁnds %%#%% largest power%%dsh%%of%%dsh%%2 number less %%cmp_ta%% %%#%% input%%per%%]$~ 
~$[with reference %%#%% %%#%% variables %%#%% table i%%lst%% %%#%% have%%cln%% 
%%#%% %%#%% mb = |bb | = 
d−1 
 
log2 (Φ(sd )) 
(6) 
d=0 
%%#%% sd %%#%% %%#%% number %%#%% elements %%#%% dimension d%%per%%]$~ ~$[the 
solution%%dsh%%set size ]f[ block partitioning %%#%% equal %%#%% %%#%% cardinality %%#%% %%#%% set %%#%% allowed values ]f[ %%#%% block size (in %%#%% 
dimension %%#%% %%#%% %%#%% option %%#%% choose %%#%% power%%dsh%%of%%dsh%%2%%dsh%%sized 
block size)%%per%%]$~ ~$[for cyclic%%cln%% 
%%#%% %%#%% mc = |nc | = 
d−1 
 
log2 (Φ(sd )) 
(7) 
d=0 
likewise%%lst%% %%#%% solution%%dsh%%set size ]f[ cyclic partitioning %%#%% equal 
%%#%% %%#%% cardinality %%#%% %%#%% set %%#%% allowed values ]f[ %%#%% number 
%%#%% partitions%%per%%]$~ ~$[for block%%dsh%%cyclic partitioning%%cln%% 
%%#%% %%#%% mbc = 
d−1 
 log2 (Φ(s 
d ))−1 
d=0 
log2 (Φ(sd )) − %%#%% 
(8) 
i=1 
%%#%% outer sum %%#%% %%#%% %%#%% dimensions%%per%%]$~ ~$[the inner sum %%#%% 
%%#%% solution space size ]f[ %%#%% dimension%%per%%]$~ ~$[the inner sum 
index %%#%% deﬁnes %%#%% legal block sizes ]f[ block cyclic partitioning%%cln%% %%#%% block sizes %%#%% 2i %%lst%% ]^[ %%cmp_tf%% range %%#%% 21 %%#%% 
2log2 (Φ(sd ))−1 %%#%% powers%%dsh%%of%%dsh%%2%%per%%]$~ ~$[the reason %%#%% block sizes %%#%% 
20 = 1 ]^[ 2log2 (Φ(sd )) %%#%% excluded %%#%% %%#%% sum bounds %%#%% 
%%#%% %%#%% solutions %%#%% standard cyclic%%lst%% ]^[ block partitioning%%lst%% 
respectively (already counted %%#%% %%#%% %%#%% %%#%% %%#%% mc ]^[ %%#%% %%#%% mb 
terms)%%per%%]$~ ~$[for %%#%% legal block size%%lst%% log2 (Φ(sd )) − %%#%% counts 
%%#%% number %%#%% %%#%% %%#%% block size %%#%% %%#%% assigned %%#%% banks 
(number %%#%% partitions)%%per%%]$~ 
~$[consider %%#%% simple %%#%% %%#%% %%#%% 2%%dsh%%dimensional array %%#%% 
33 × 16 elements%%lst%% %%#%% %%#%% %%#%% %%#%% %%#%% 2%%lst%% s0 %%#%% 16 ]^[ s1 %%#%% 
33%%per%%]$~ ~$[let %%#%% %%#%% %%#%% look %%#%% %%#%% row dimension (1)%%lst%% |pb | = 5%%lst%% 
|pc | = 5%%lst%% ]^[ |pbc | = 10%%per%%]$~ ~$[if %%#%% elaborate %%#%% block cyclic set 
%%#%% %%#%% |pbc | = 4 + 3 + 2 + 1%%lst%% %%#%% %%#%% term corresponds 
%%#%% %%#%% number %%#%% solutions ]f[ %%#%% %%#%% block size %%#%% 2%%lst%% 4%%lst%% 8%%lst%% 
]^[ 16%%lst%% respectively%%per%%]$~ 
~$[the %%#%% represents %%#%% solution%%dsh%%set size ]f[ %%#%% single array%%per%%]$~ 
~$[when %%#%% %%#%% multiple arrays %%#%% %%#%% %%#%% program%%lst%% 
%%#%% exploration space %%#%% %%#%% cartesian product %%#%% %%#%% 
%%#%% %%#%% partitioning schemes %%#%% %%#%% array%%lst%% %%#%% %%#%% 
%%#%% %%#%% large %%#%% ]f[ modestly sized arrays%%per%%]$~ ~$[the bruteforced approach ]f[ enumerating partitioning possibilities %%#%% 
]n[ scale %%#%% %%#%% %%#%% size %%#%% %%#%% solution space nor %%#%% %%#%% 
memory trace size%%per%%]$~ ~$[in future work%%lst%% %%#%% pruning approach %%#%% %%#%% 
%%#%% %%#%% remove partitioning possibilities %%#%% %%#%% %%#%% known 
%%#%% perform worse %%cmp_ta%% %%#%% schemes%%per%%]$~ ~$[large memory traces 
%%#%% %%#%% %%#%% time %%#%% process%%lst%% %%#%% deal %%#%% %%#%% issue%%lst%% %%#%% 
%%#%% %%#%% %%#%% sampling approach%%lst%% %%#%% %%#%% trace portions 
%%#%% %%#%% gathered %%#%% various intervals %%#%% order %%#%% %%#%% %%#%% %%#%% ]b[ 
representative version %%#%% %%#%% memory trace%%per%% 
%%#%% partition type %%#%% %%#%% %%#%% %%#%% following ∗%%lst%% b%%lst%% c%%lst%% bc %%#%% 
stands ]f[ complete%%lst%% block%%lst%% cyclic%%lst%% ]v[ block cyclic%%per%%]$~ ~$[for example%%lst%% %%cmp_if%% %%#%% %%#%% %%#%% partition %%#%% %%#%% × %%#%% matrix %%#%% 2 blocks%%lst%% 
%%#%% %%#%% ﬁrst block contains %%#%% elements %%#%% %%#%% %%#%% rows ]f[ 
columns %%#%% range 0 %%#%% n/2 − 1 ]^[ %%#%% %%#%% block contains 
%%#%% elements %%#%% %%#%% %%#%% rows ]f[ columns %%#%% range n/2 %%#%% %%#%% −1%%lst%% 
%%cmp_t%% %%#%% partitioning scheme %%#%% %%#%% 0b2 %%#%% stands ]f[ 
block partition %%#%% 2 blocks %%#%% %%#%% column dimension%%per%% 
matrixadd area comparison 
3 
wall%%dsh%%clock time 
fmax 
alms 
rams 
area%%dsh%%delay product 
2 
1 
c1 
6 
2 
0 
0b 
dimension %%#%% partitionpartition typen[ b] 
%%#%% %%#%% representative example%%lst%% %%#%% examine %%#%% matrixadd 
benchmark %%#%% detail ]^[ assess %%#%% performance versus area 
trade%%dsh%%offs%%per%% 
6 
c1 
6 
4 
0c 
16 
%%#%% %%#%% performance evaluation %%#%% %%#%% array partitioning 
pass%%lst%% %%#%% run %%#%% benchmark %%#%% 8 threads %%#%% %%#%% partitioning schemes%%lst%% %%#%% %%#%% number %%#%% partitions %%#%% ]n[ 
exceed 16%%per%%]$~ ~$[the notation %%#%% ]f[ %%#%% partitioning schemes ]f[ 
%%#%% rest %%#%% %%#%% paper %%#%% %%#%% follows%%cln%% 
c%%per%%]$~ ~$[partitioning performance vs%%per%%]$~ ~$[area 
1b 
1 
b%%per%%]$~ ~$[partitioning performance results 
%%#%% table ii %%#%% observe %%#%% %%#%% multiple partitioning schemes %%#%% yield %%#%% %%#%% cycle count%%per%%]$~ ~$[however%%lst%% 
%%#%% know intuitively %%#%% partitioning schemes requiring %%#%% 
partitions %%#%% yield designs %%#%% lower clock frequencies ]^[ 
%%#%% area %%#%% %%#%% numbers %%#%% partitions means %%#%% 
arbitration logic%%per%%]$~ ~$[we %%#%% discuss area versus performance 
trade%%dsh%%offs %%#%% %%#%% following section%%per%% 
1b 
matrixadd performs %%#%% summation %%#%% %%#%% elements %%#%% %%#%% 
128×128 input integer matrix%%lst%% %%#%% %%#%% thread %%#%% responsible 
]f[ %%#%% summation %%#%% %%#%% chunk %%#%% rows%%per%%]$~ ~$[histogram reads %%#%% 
32768 element input array ]^[ counts %%#%% number elements 
%%#%% belong %%#%% %%#%% %%#%% value range %%#%% %%#%% local array%%per%%]$~ 
~$[matrixmult performs matrix multiplication %%#%% %%#%% 32×32 input 
matrices – matrixa ]^[ matrixb%%lst%% %%#%% %%#%% thread %%#%% 
responsible ]f[ computing %%#%% results %%#%% %%#%% chunk %%#%% rows%%per%%]$~ 
~$[matrixmult (cyclic) %%#%% %%#%% variation %%#%% %%#%% matrixmult benchmark%%lst%% 
%%#%% %%#%% thread %%#%% responsible ]f[ computing %%#%% output ]f[ 
%%#%% row %%#%% %%#%% cyclic manner%%lst%% %%#%% thread 0 %%#%% compute 
%%#%% outputs %%#%% row 0%%lst%% 8%%lst%% 16%%lst%% etc%%per%%]$~ ~$[additionally%%lst%% matrixmult %%#%% 
modiﬁed %%#%% %%#%% %%#%% thread accesses matrixb %%#%% %%#%% 
offset %%#%% %%#%% %%#%% set %%#%% columns %%#%% allow ]f[ parallelization 
%%#%% accesses %%#%% columns%%per%%]$~ ~$[matrixtrans performs matrix transpose 
%%#%% %%#%% 128×128 input matrix%%lst%% %%#%% %%#%% thread transposes 
%%#%% row %%#%% %%#%% input ]f[ %%#%% contiguous slice %%#%% columns 
%%#%% %%#%% output%%per%%]$~ ~$[for example%%lst%% thread 0 %%#%% responsible ]f[ 
transposing ]f[ %%#%% rows %%#%% columns 0 %%dsh%% 15 ]f[ %%#%% input 
matrix%%per%%]$~ ~$[matrixtrans (block cyclic) %%#%% %%#%% variant %%#%% matrixtrans 
benchmark%%lst%% %%#%% %%#%% thread transposes %%#%% chunk %%#%% rows %%#%% 
%%#%% input ]f[ %%#%% columns %%#%% %%#%% output %%#%% %%#%% block cyclic 
manner%%per%%]$~ ~$[for example%%lst%% thread 0 %%#%% responsible ]f[ transposing 
rows 0%%dsh%%3%%lst%% 32%%dsh%%35%%lst%% 64%%dsh%%67%%lst%% ]^[ 96%%dsh%%99 ]f[ %%#%% columns %%#%% %%#%% input 
matrix%%per%%]$~ ~$[los (line %%#%% sight) consists %%#%% %%#%% 64×64 obstacle map 
%%#%% %%#%% %%#%% pixel %%#%% %%#%% %%#%% %%#%% values %%#%% %%#%% 1 ]v[ 0%%lst%% 
%%#%% 1 represents %%#%% obstacle ]^[ 0 represents unoccupied 
space ]^[ %%#%% human %%#%% assumed %%#%% %%#%% situated %%#%% %%#%% middle %%#%% 
%%#%% obstacle map%%per%%]$~ ~$[the threads %%#%% sweep %%#%% %%#%% obstacle 
map %%#%% %%#%% map coordinate ]^[ steps %%#%% %%#%% direction %%#%% %%#%% 
human located %%#%% %%#%% center %%#%% determine %%#%% %%#%% %%#%% %%#%% 
obstacle %%#%% %%#%% beginning location ]^[ %%#%% human%%per%%]$~ ~$[if 
%%#%% is%%lst%% %%cmp_t%% %%#%% coordinate location %%#%% ]n[ %%#%% %%#%% line %%#%% 
sight %%#%% %%#%% human ]^[ %%#%% %%#%% %%#%% marked %%#%% 0 %%#%% %%#%% output 
map%%lst%% otherwise %%#%% %%#%% %%#%% marked 1%%per%%]$~ ~$[this benchmark %%#%% input 
dependent ]^[ %%#%% ]n[ intuitive %%#%% terms %%#%% %%#%% partitioning 
scheme %%#%% %%#%% %%#%% optimal%%per%% 
0b 
c8 
1b 2 
c8 
8 
1b 
8 
%%#%% evaluation %%#%% array partitioning %%#%% circuit performance%%lst%% %%#%% %%#%% %%#%% %%#%% accuracy %%#%% %%#%% memory simulator 
%%#%% performed using 8 multi%%dsh%%threaded benchmarks%%cln%% matrixadd%%lst%% histogram%%lst%% matrixmult%%lst%% matrixmult (cyclic)%%lst%% matrixtrans%%lst%% 
matrixtrans (block cyclic)%%lst%% substring%%lst%% ]^[ los%%per%% 
16 
1b 
4 
a%%per%%]$~ ~$[benchmark description 
first%%lst%% %%#%% %%#%% %%#%% execution cycles reduction results %%#%% 
table ii%%per%%]$~ ~$[the %%#%% column %%#%% %%#%% cycle count ]f[ %%#%% 
baseline unpartitioned %%#%% ]f[ %%#%% parallel kernel region %%#%% 
(not including error checking)%%scn%% %%#%% third column %%#%% %%#%% 
cycle count %%#%% %%#%% partitioned %%#%% leading %%#%% %%#%% lowest cycle 
count %%#%% ]f[ %%#%% parallel kernel region%%scn%% %%#%% fourth column 
%%#%% %%#%% cycle %%#%% %%#%% last memory access %%#%% %%#%% arrays 
%%#%% partitioning%%lst%% %%#%% %%#%% %%#%% useful ]f[ comparison %%#%% 
section vi%%dsh%%d%%scn%% %%#%% ﬁfth column %%#%% %%#%% cycle count speedup 
%%#%% %%#%% partitioned %%#%% %%#%% unpartitioned case%%scn%% ]^[ column 
six %%#%% %%#%% partitioning scheme(s) %%#%% lead %%#%% %%#%% %%#%% 
cycle count%%per%%]$~ ~$[in matrixmult%%lst%% matrixmult (cyclic)%%lst%% matrixtrans%%lst%% 
]^[ matrixtrans (block cyclic) %%#%% benchmarks %%#%% contain 2 
matrices%%lst%% ]^[ %%#%% %%#%% %%#%% partitioned%%per%%]$~ ~$[the results %%#%% 
%%#%% %%#%% partitioning schemes leading %%#%% %%#%% %%#%% cycle execution ]f[ %%#%% matrix matrixa %%#%% matrixmult ]^[ matrixmult 
(cyclic)%%lst%% ]^[ ]f[ %%#%% matrix input_array %%#%% matrixtrans 
]^[ matrixtrans (block cyclic)%%per%%]$~ ~$[since %%#%% access patterns ]f[ 
%%#%% 2 matrices %%#%% %%#%% 4 benchmarks %%#%% transposed %%#%% %%#%% 
other%%lst%% i%%per%%e%%per%% ]f[ matrixmult matrixa %%#%% accessed row %%#%% row 
%%#%% matrixb %%#%% accessed column %%#%% column%%lst%% %%#%% partition 
scheme %%#%% leads %%#%% %%#%% %%#%% cycles execution %%#%% %%#%% matrix 
%%#%% simply %%#%% applied %%#%% %%#%% %%#%% matrix %%#%% %%#%% opposite 
dimension%%per%%]$~ ~$[this means%%lst%% %%#%% partitioning scheme leading %%#%% 
%%#%% %%#%% %%#%% lowest cycle count ]f[ matrixadd %%#%% 0b16 ]f[ 
matrixa ]^[ 1b16 ]f[ matrixb%%per%%]$~ ~$[the geomean speedup %%#%% 
%%#%% 8 benchmarks %%#%% 2%%per%%21×%%per%% 
1b 
c4 
%%#%% xperimental %%#%% esults 
normalized performance ]^[ area 
vi%%per%%]$~ 
~$[fig%%per%% 3%%cln%% area ]^[ wall%%dsh%%clock time variations %%#%% “best” 
performing matrixadd partitions%%per%%]$~ 
~$[fig%%per%% 3 %%#%% %%#%% relative wall%%dsh%%clock time%%lst%% fmax%%lst%% alms 
]^[ ram usage%%lst%% ]^[ area%%dsh%%delay products %%#%% %%#%% 9 partitioning 
schemes leading %%#%% %%#%% %%#%% cycle count found %%#%% modelsim simulation%%per%%]$~ ~$[all values %%#%% normalized %%#%% %%#%% unpartitioned 
design results%%per%%]$~ ~$[the area%%dsh%%delay product %%#%% calculated using %%#%% 
relative area%%dsh%%scaling factors %%#%% %%#%% [14]%%per%%]$~ ~$[the scaling 
benchmark 
matrixadd 
histogram 
matrixmult 
matrixmult (cyclic) 
matrixtrans 
matrixtrans (blockcyclic) 
parallel region cycles 
16396 
4157 
33077 
24013 
32839 
16799 
32837 
16794 
16395 
6423 
16482 
6348 
substring 
los 
16396 
83217 
last memory cycle 
4163 
23987 
16793 
16789 
6419 
6344 
speedup 
3%%per%%94 
1%%per%%38 
1%%per%%95 
1%%per%%95 
2%%per%%55 
2%%per%%60 
4117 
79537 
3%%per%%98 
1%%per%%05 
4120 
79543 
partition schemes 
1b4%%lst%% 1b8%%lst%% 1b16%%lst%% 0c16%%lst%% 0bc8 2%%lst%% 0bc16 2%%lst%% 1bc4 16%%lst%% 1bc8 8%%lst%% 1bc16 4 
0b8%%lst%% 0b16 
0b16%%lst%% 1b4%%lst%% 1b8%%lst%% 1b16%%lst%% 0c8%%lst%% 0c16%%lst%% 1c16%%lst%% 0bc4 2%%lst%% 0bc8 2%%lst%% 1bc4 4%%lst%% 1bc8 2 
0b16%%lst%% 1b16%%lst%% 0c8%%lst%% 0c16%%lst%% 1c4%%lst%% 1c8%%lst%% 1c16%%lst%% 0bc4 2%%lst%% 0bc8 2%%lst%% 1bc4 2%%lst%% 1bc8 2 
0b4%%lst%% 0b8%%lst%% 0b16%%lst%% 0c8%%lst%% 0c16%%lst%% 0bc4 2%%lst%% 0bc8 2%%lst%% 0bc8 4%%lst%% 0bc8 8%%lst%% 0bc16 2%%lst%% 0bc16 4 
0c8%%lst%% 0c16%%lst%% 1c16%%lst%% 1b16%%lst%% 0bc4 2%%lst%% 0bc8 2%%lst%% 0bc16 2%%lst%% 1bc4 4%%lst%% 1bc4 8%%lst%% 1bc8 2%%lst%% 
1bc8 4%%lst%% 1bc8 8%%lst%% 1bc16 2%%lst%% 1bc16 4 
0c4%%lst%% 0c8%%lst%% 0c16%%lst%% 0b8%%lst%% 0b16%%lst%% 0bc8 2%%lst%% 0bc8 1024%%lst%% 0bc16 2%%lst%% 0bc16 512 
1bc16 2 
table ii%%cln%% baseline unpartitioned versus %%#%% partition scheme(s) execution cycles%%per%% 
matrixadd performance 
however%%lst%% %%#%% clock frequency reduces %%#%% 8 partitions %%#%% 
16 partitions %%#%% 90%%per%%39 mhz %%#%% 78%%per%%55 mhz%%lst%% %%#%% %%#%% alm%%lst%% 
register%%lst%% ]^[ ram usage %%#%% increase %%#%% %%#%% expect%%per%% 
183%%per%%26 
16,376 
cycles 
16,396 14,720 
contentions 
wall%%dsh%%clock time[μs] 
89%%per%%48 
d%%per%%]$~ ~$[evaluation %%#%% %%#%% memory simulator 
·104 
7,681 
55%%per%%97 
5,119 
1 2 
4 
52%%per%%92 
45%%per%%99 
4,157 
1%%per%%5 
4,157 
0 
8 
number %%#%% partitions 
16 
0 
(a) performance result comparing total execution cycles %%#%% benchmark 
%%#%% %%#%% %%#%% %%#%% number %%#%% resulting contentions ]^[ wall%%dsh%%clock time 
computed using %%#%% fmax achieved%%per%%]$~ 
~$[predicted cycle 
8,214 
1 
0%%per%%5 
0%%per%%5 
matrixadd area 
68 68 
1 2 
1%%per%%5 
5,253 
3,821 
alms 
registers 
rams 
fmax[mhz] 
4 
·104 
·104 
78%%per%%55 
4,918 
2,845 
2,689 
1%%per%%5 
(a) matrixadd benchmark 
8,478 
60 
90%%per%%39 
6,127 
8 
number %%#%% partitions 
16 
(b) area result comparing total number %%#%% alms%%lst%% registers%%lst%% block 
rams%%lst%% %%#%% %%#%% %%#%% %%#%% fmax achieved %%#%% static timing analysis%%per%%]$~ 
~$[fig%%per%% 4%%cln%% performance ]^[ area comparison ]f[ matrixadd benchmark %%#%% block cyclic partitioning %%#%% %%#%% numbers 
%%#%% partitions %%#%% block size 2%%per%% 
factor ]f[ %%#%% alut (half%%dsh%%alm) %%#%% %%#%% %%#%% 0%%per%%05 %%#%% [14]%%lst%% 
%%#%% %%#%% multiply %%#%% 2 %%#%% estimate %%#%% area %%#%% %%#%% %%#%% alm%%per%%]$~ ~$[the 
scaling factor ]f[ %%#%% m9k ram block %%#%% %%#%% %%#%% 2%%per%%87 %%#%% [14]%%lst%% 
%%#%% %%#%% multiply %%#%% 1%%per%%1 %%#%% estimate %%#%% area %%#%% %%#%% m10k 
ram%%per%%]$~ ~$[notice %%#%% %%#%% %%#%% %%#%% “optimal” partitionings%%lst%% 
%%#%% normalized area%%dsh%%delay product ﬂuctuates %%#%% 0%%per%%31 %%#%% 
0%%per%%63%%per%%]$~ ~$[the main cause %%#%% %%#%% %%#%% due %%#%% %%#%% %%#%% area cost %%#%% 
partitioning %%#%% %%#%% %%#%% %%#%% schemes%%per%%]$~ 
~$[it %%#%% %%#%% %%#%% %%#%% observe %%#%% partitioning leads %%#%% 
diminishing returns %%#%% terms %%#%% cycle count%%lst%% ]b[ %%#%% incur 
signiﬁcant area costs%%per%%]$~ ~$[fig%%per%% 4a ]^[ fig%%per%% 4b %%#%% %%#%% performance 
]^[ area %%#%% %%#%% matrixadd benchmark respectively %%#%% blockcyclic partitioning %%#%% %%#%% column dimension (0) ]f[ various 
numbers %%#%% partitions ]^[ %%#%% block size %%#%% 2%%per%%]$~ ~$[observe %%#%% %%#%% 
execution cycles reaches %%#%% minimum ]f[ 8 ]^[ 16 partitions%%lst%% 
predicted cycle 
4,325 
4,029 
4 
8,442 
68 
68 
91%%per%%8 91%%per%%46 
89%%per%%47 
1 
actual cycle 
1 
0%%per%%5 
0%%per%%5 
1 
actual cycle 
1%%per%%5 
·104 
(b) substring benchmark 
fig%%per%% 5%%cln%% memory simulator predicted versus actual cycle %%#%% last 
memory access%%per%%]$~ 
~$[the goal %%#%% %%#%% memory simulator %%#%% %%#%% accurately predict 
%%#%% schedule %%#%% memory accesses %%#%% %%#%% circuit %%#%% various 
partitioning schemes %%#%% %%#%% memory access trace gathered 
%%#%% %%#%% unpartitioned implementation %%#%% %%#%% circuit %%#%% 
%%#%% representative input%%per%%]$~ ~$[the size %%#%% %%#%% exploration space %%#%% 
described %%#%% section v%%dsh%%d%%per%%]$~ ~$[in %%#%% evaluation%%lst%% %%#%% perform %%#%% 
prediction %%#%% %%#%% execution cycle count %%#%% %%#%% %%#%% 
partition schemes %%#%% %%#%% number %%#%% partitions %%#%% ]n[ 
exceed 16 ]^[ %%cmp%% %%#%% results %%#%% %%#%% results %%#%% table ii 
%%#%% section vi%%dsh%%b %%#%% %%#%% %%cmp_if%% i) %%#%% optimal partitioning schemes 
%%#%% detected ]^[ %%cmp_if%% ii) %%#%% predicted cycle %%#%% last memory 
access reported %%#%% %%#%% memory simulator matches %%#%% actual 
cycle %%#%% modelsim simulation%%per%%]$~ 
~$[table iii %%#%% %%#%% predicted ]^[ actual cycle %%#%% last 
memory access %%#%% %%#%% partitioned arrays%%lst%% %%#%% absolute percent%%dsh%% 
benchmark 
actual cycle %%#%% last 
memory access 
4163 
23987 
16799 
16789 
6419 
6344 
% error 
matrixadd 
histogram 
matrixmult 
matrixmult (cyclic) 
matrixtrans 
matrixtrans (blockcyclic) 
predicted cycle %%#%% 
last memory access 
4163 
23987 
16793 
16789 
6420 
6345 
substring 
los 
4117 
79537 
4117 
79537 
16%%per%%52 
0 
0 
0%%per%%004 
0%%per%%03 
0%%per%%16 
0%%per%%01 
0%%per%%01 
partitioning schemes 
1b4%%lst%% 1b8%%lst%% 1b16%%lst%% 0c16%%lst%% 0bc8 2%%lst%% 0bc16 2%%lst%% 1bc4 16%%lst%% 1bc8 8%%lst%% 1bc16 4 
0b8%%lst%% 0b16 
0b16%%lst%% 1b4%%lst%% 1b8%%lst%% 1b16%%lst%% 0c8%%lst%% 0c16%%lst%% 1c16%%lst%% 0bc4 2%%lst%% 0bc8 2%%lst%% 1bc4 4%%lst%% 1bc8 2 
0b16%%lst%% 1b16%%lst%% 0c8%%lst%% 0c16%%lst%% 1c4%%lst%% 1c8%%lst%% 1c16%%lst%% 0bc4 2%%lst%% 0bc8 2%%lst%% 1bc4 2%%lst%% 1bc8 2 
0b4%%lst%% 0b8%%lst%% 0b16%%lst%% 0c8%%lst%% 0c16%%lst%% 0bc4 2%%lst%% 0bc8 2%%lst%% 0bc8 4%%lst%% 0bc8 8%%lst%% 0bc16 2%%lst%% 0bc16 4 
0c8%%lst%% 0c16%%lst%% 1c16%%lst%% 1b16%%lst%% 0bc4 2%%lst%% 0bc8 2%%lst%% 0bc16 2%%lst%% 1bc4 4%%lst%% 1bc4 8%%lst%% 1bc8 2%%lst%% 
1bc8 4%%lst%% 1bc8 8%%lst%% 1bc16 2%%lst%% 1bc16 4 
0c8%%lst%% 0c16%%lst%% 0b8%%lst%% 0b16%%lst%% 0bc8 2%%lst%% 0bc8 1024%%lst%% 0bc16 2%%lst%% 0bc16 512 (missing%%cln%% 0c4) 
1bc16 2 
table iii%%cln%% memory simulator evaluation ]f[ 16 partitions ]^[ under%%per%% 
age error ]f[ %%#%% %%#%% %%#%% partitioning%%lst%% %%#%% %%#%% number %%#%% 
partitions %%#%% equal ]v[ less %%cmp_ta%% 16%%lst%% %%#%% %%#%% %%#%% %%#%% partition 
schemes predicted %%#%% %%#%% memory simulator %%#%% %%#%% %%#%% lowest 
last cycle %%#%% memory access%%per%%]$~ ~$[fig%%per%% 5a %%#%% %%#%% accuracy %%#%% 
%%#%% memory simulator ]f[ %%#%% matrixadd benchmark%%lst%% %%#%% 
%%#%% horizontal axis plots %%#%% actual cycle %%#%% %%#%% last memory 
access %%#%% %%#%% arrays %%#%% %%#%% ]^[ %%#%% vertical axis plots %%#%% 
predicted cycle %%#%% last memory access%%per%%]$~ ~$[the closer %%#%% %%#%% red 
line %%#%% data falls%%lst%% %%#%% %%#%% accurate %%#%% prediction%%per%%]$~ ~$[fig%%per%% 5b 
%%#%% %%#%% accuracy %%#%% %%#%% memory simulator ]f[ %%#%% substring 
benchmark%%per%%]$~ ~$[the absolute percentage error ]f[ %%#%% substring 
benchmark %%#%% 16%%per%%52%%%per%%]$~ ~$[the source %%#%% error %%#%% determined %%#%% 
%%#%% differences %%#%% scheduling due %%#%% %%#%% port bindings ]f[ 
memory accesses %%#%% %%#%% original unpartitioned case%%lst%% %%#%% 
%%#%% %%#%% extract %%#%% memory access chain%%lst%% ]^[ %%#%% memory 
port binding %%#%% %%#%% hls %%#%% %%#%% partitioned case%%per%%]$~ 
~$[for 7 %%#%% %%#%% 8 test cases%%lst%% %%#%% memory simulator %%#%% able %%#%% 
accurately predict %%#%% partitioning schemes %%#%% lead %%#%% %%#%% 
lowest execution cycles%%per%%]$~ ~$[in %%#%% %%#%% %%#%% substring%%lst%% %%#%% memory 
simulator missed 1 %%#%% %%#%% 9 %%#%% partitioning schemes%%per%%]$~ ~$[these 
results %%#%% encouraging %%#%% looking %%#%% %%#%% variety %%#%% %%#%% 
partitioning schemes%%lst%% %%#%% %%#%% %%#%% %%#%% %%#%% %%#%% schemes %%#%% 
non%%dsh%%intuitive%%per%%]$~ ~$[this means %%#%% %%#%% %%#%% hard ]f[ %%#%% designer %%#%% 
realize %%#%% %%#%% partitioning scheme 1bc4 16 ]f[ %%#%% benchmark 
matrixadd leads %%#%% %%#%% %%#%% %%#%% %%#%% solutions%%per%%]$~ ~$[as seen %%#%% 
%%#%% area comparison %%#%% fig%%per%% 3%%lst%% %%#%% solution actually leads %%#%% 
%%#%% lowest normalized area%%dsh%%delay product%%per%%]$~ ~$[this %%#%% %%#%% %%#%% 
memory simulator%%dsh%%driven automatic memory partitioning tool 
%%#%% %%#%% useful tool %%#%% detecting multiple %%#%% solutions %%#%% 
prune %%#%% exploration space ]f[ %%#%% hardware/software designer%%per%%]$~ 
~$[vii%%per%%]$~ 
~$[c onclusion 
memory access %%#%% %%#%% %%#%% performance bottleneck %%#%% computer hardware%%per%%]$~ ~$[in %%#%% paper%%lst%% %%#%% considered memory architecture synthesis %%#%% %%#%% hls context%%lst%% speciﬁcally %%#%% %%#%% synthesis 
%%#%% parallel hardware %%#%% parallel multi%%dsh%%threaded software%%per%%]$~ ~$[we 
implemented ﬂexible array partitioning %%#%% %%#%% llvm compiler 
pass %%#%% %%#%% legup hls framework%%per%%]$~ ~$[the array partitions 
%%#%% implemented %%#%% separate logical rams (banks) %%#%% %%#%% 
hardware%%lst%% %%#%% arbiters inserted %%#%% manage concurrent accesses 
%%#%% threads%%per%%]$~ ~$[with %%#%% banked architecture synthesis%%lst%% %%#%% 
geomean speed %%#%% %%#%% %%#%% parallel execution cycles %%#%% 2%%per%%21×%%lst%% 
%%#%% 8 benchmarks%%per%%]$~ 
~$[as %%#%% %%#%% onerous ]f[ %%#%% %%#%% select %%#%% array partitioning ]^[ 
specify %%#%% using specialized compiler pragmas%%lst%% %%#%% devised %%#%% 
automatic memory partitioning tool %%#%% %%#%% %%#%% cycle accurate 
memory simulator%%lst%% which%%lst%% %%#%% %%#%% accurate model %%#%% memory 
access arbitration %%#%% predict %%#%% %%#%% average absolute percent 
error %%#%% 2%%per%%09% %%#%% last memory cycle %%#%% access %%#%% %%#%% 8 
multi%%dsh%%threaded benchmarks%%per%%]$~ ~$[the simulator %%#%% %%#%% applied %%#%% 
automatically select %%#%% %%#%% partitioning ]f[ %%#%% array%%per%%]$~ 
~$[future %%#%% %%#%% look %%#%% %%#%% interdependency %%#%% memory 
bank architecture synthesis ]^[ %%#%% memory port binding step 
%%#%% %%#%% hls ﬂow%%lst%% %%#%% %%#%% %%#%% %%#%% selective multi%%dsh%%pumping %%#%% 
memories %%#%% %%#%% combined %%#%% %%#%% proposed partitioning 
techniques%%per%%]$~ ~$[the brute%%dsh%%force partitioning scheme enumeration 
approach %%#%% %%#%% %%#%% swapped ]f[ %%#%% smarter pruning approach 
%%#%% order %%#%% %%#%% programs %%#%% multiple arrays tractable %%#%% 
%%#%% trace%%dsh%%based solution%%per%%]$~ 
~$[r eferences 
[1] 
[2] 
[3] 
[4] 
[5] 
[6] 
[7] 
[8] 
[9] 
[10] 
[11] 
[12] 
[13] 
[14] 
[15] 
[16] 
a%%per%%]$~ ~$[canis%%lst%% j%%per%%]$~ ~$[choi%%lst%% m%%per%%]$~ ~$[aldham%%lst%% v%%per%%]$~ ~$[zhang%%lst%% a%%per%%]$~ ~$[kammoona%%lst%% t%%per%%]$~ ~$[czajkowski%%lst%% 
s%%per%%]$~ ~$[d%%per%%]$~ ~$[brown%%lst%% ]^[ j%%per%%]$~ ~$[h%%per%%]$~ ~$[anderson%%per%%]$~ ~$[legup%%cln%% %%#%% open%%dsh%%source high%%dsh%%level 
synthesis tool ]f[ fpga%%dsh%%based processor/accelerator systems%%per%%]$~ ~$[acm 
trans%%per%%]$~ ~$[embed%%per%%]$~ ~$[comput%%per%%]$~ ~$[syst%%per%%%%lst%% 13(2)%%lst%% 2013%%per%%]$~ 
~$[j%%per%%]$~ ~$[choi%%lst%% j%%per%%]$~ ~$[anderson%%lst%% ]^[ s%%per%%]$~ ~$[brown%%per%%]$~ ~$[from software threads %%#%% parallel 
hardware %%#%% fpga high%%dsh%%level synthesis%%per%%]$~ ~$[in ieee fpt%%lst%% pages 270–279%%lst%% 
2013%%per%%]$~ 
~$[j%%per%%]$~ ~$[choi%%lst%% s%%per%%]$~ ~$[brown%%lst%% ]^[ j%%per%%]$~ ~$[anderson%%per%%]$~ ~$[resource ]^[ memory management 
techniques ]f[ %%#%% high%%dsh%%level synthesis %%#%% software threads %%#%% parallel 
fpga hardware%%per%%]$~ ~$[in ieee fpt%%lst%% pages 152–159%%lst%% 2015%%per%%]$~ 
~$[a%%per%%]$~ ~$[cilardo ]^[ l%%per%%]$~ ~$[gallo%%per%%]$~ ~$[improving multibank memory access parallelism %%#%% lattice%%dsh%%based partitioning%%per%%]$~ ~$[acm trans%%per%%]$~ ~$[archit%%per%%]$~ ~$[code optim%%per%%%%lst%% 
11(4)%%lst%% jan%%per%% 2015%%per%%]$~ 
~$[j%%per%%]$~ ~$[cong%%lst%% b%%per%%]$~ ~$[liu%%lst%% s%%per%%]$~ ~$[neuendorffer%%lst%% j%%per%%]$~ ~$[noguera%%lst%% k%%per%%]$~ ~$[a%%per%%]$~ ~$[vissers%%lst%% ]^[ 
z%%per%%]$~ ~$[zhang%%per%%]$~ ~$[high%%dsh%%level synthesis ]f[ fpgas%%cln%% %%#%% prototyping %%#%% deployment%%per%%]$~ ~$[ieee trans%%per%% %%#%% cad%%lst%% 30(4):473–491%%lst%% 2011%%per%%]$~ 
~$[p%%per%%]$~ ~$[coussy%%lst%% d%%per%%]$~ ~$[d%%per%%]$~ ~$[gajski%%lst%% m%%per%%]$~ ~$[meredith%%lst%% ]^[ a%%per%%]$~ ~$[takach%%per%%]$~ ~$[an introduction 
%%#%% high%%dsh%%level synthesis%%per%%]$~ ~$[ieee design test %%#%% computers%%lst%% 26(4):8–17%%lst%% 
2009%%per%%]$~ 
~$[l%%per%%]$~ ~$[gallo%%lst%% a%%per%%]$~ ~$[cilardo%%lst%% d%%per%%]$~ ~$[thomas%%lst%% s%%per%%]$~ ~$[bayliss%%lst%% ]^[ g%%per%%]$~ ~$[a%%per%%]$~ ~$[constantinides%%per%%]$~ 
~$[area implications %%#%% memory partitioning ]f[ high%%dsh%%level synthesis %%#%% 
fpgas%%per%%]$~ ~$[in fpl%%lst%% 2014%%per%%]$~ 
~$[intel corp%%per%%]$~ ~$[intel corp%%per%%]$~ ~$[intel fpga sdk ]f[ opencl%%per%% https://www%%per%% 
altera%%per%%com/products/design%%dsh%%software/embedded%%dsh%%software%%dsh%%developers/ 
opencl/overview%%per%%html%%per%%]$~ 
~$[c%%per%%]$~ ~$[lattner ]^[ v%%per%%]$~ ~$[s%%per%%]$~ ~$[adve%%per%%]$~ ~$[llvm%%cln%% %%#%% compilation framework ]f[ 
lifelong program analysis & transformation%%per%%]$~ ~$[in ieee/acm cgo%%lst%% pages 
75–88%%lst%% 2004%%per%%]$~ 
~$[c%%per%%]$~ ~$[meng%%lst%% s%%per%%]$~ ~$[yin%%lst%% p%%per%%]$~ ~$[ouyang%%lst%% l%%per%%]$~ ~$[liu%%lst%% ]^[ s%%per%%]$~ ~$[wei%%per%%]$~ ~$[efﬁcient memory 
partitioning ]f[ parallel data access %%#%% multidimensional arrays%%per%%]$~ ~$[in 
ieee/acm dac%%lst%% 2015%%per%%]$~ 
~$[r%%per%%]$~ ~$[nane%%lst%% v%%per%%]$~ ~$[m%%per%%]$~ ~$[sima%%lst%% c%%per%%]$~ ~$[pilato%%lst%% j%%per%%]$~ ~$[choi%%lst%% b%%per%%]$~ ~$[fort%%lst%% a%%per%%]$~ ~$[canis%%lst%% y%%per%%]$~ ~$[t%%per%%]$~ ~$[chen%%lst%% 
h%%per%%]$~ ~$[hsiao%%lst%% s%%per%%]$~ ~$[brown%%lst%% f%%per%%]$~ ~$[ferrandi%%lst%% j%%per%%]$~ ~$[anderson%%lst%% ]^[ k%%per%%]$~ ~$[bertels%%per%%]$~ ~$[a survey 
]^[ evaluation %%#%% fpga high%%dsh%%level synthesis tools%%per%%]$~ ~$[ieee trans%%per%% %%#%% 
cad%%lst%% 35(10):1591–1604%%lst%% 2016%%per%%]$~ 
~$[y%%per%%]$~ ~$[wang%%lst%% p%%per%%]$~ ~$[li%%lst%% ]^[ j%%per%%]$~ ~$[cong%%per%%]$~ ~$[theory ]^[ algorithm ]f[ generalized 
memory partitioning %%#%% high%%dsh%%level synthesis%%per%%]$~ ~$[in acm fpga%%lst%% pages 
199–208%%lst%% 2014%%per%%]$~ 
~$[y%%per%%]$~ ~$[wang%%lst%% p%%per%%]$~ ~$[li%%lst%% p%%per%%]$~ ~$[zhang%%lst%% c%%per%%]$~ ~$[zhang%%lst%% ]^[ j%%per%%]$~ ~$[cong%%per%%]$~ ~$[memory partitioning 
]f[ multidimensional arrays %%#%% high%%dsh%%level synthesis%%per%%]$~ ~$[in acm/ieee dac%%lst%% 
2013%%per%%]$~ 
~$[h%%per%%]$~ ~$[wong%%lst%% v%%per%%]$~ ~$[betz%%lst%% ]^[ j%%per%%]$~ ~$[rose%%per%%]$~ ~$[comparing fpga vs%%per%% custom cmos ]^[ 
%%#%% impact %%#%% processor microarchitecture%%per%%]$~ ~$[in proceedings %%#%% %%#%% 19th 
acm/sigda international symposium %%#%% field programmable gate 
arrays%%lst%% fpga ’11%%lst%% pages 5–14%%lst%% %%#%% york%%lst%% ny%%lst%% usa%%lst%% 2011%%per%%]$~ ~$[acm%%per%%]$~ 
~$[xilinx inc%%per%%]$~ ~$[vivado hls%%per%% https://www%%per%%xilinx%%per%%com/products/design%%dsh%%tools/ 
vivado/integration%%per%%html%%lst%% 2017%%per%%]$~ 
~$[y%%per%%]$~ ~$[zhou%%lst%% k%%per%%]$~ ~$[m%%per%%]$~ ~$[al%%dsh%%hawaj%%lst%% ]^[ z%%per%%]$~ ~$[zhang%%per%%]$~ ~$[a %%#%% approach %%#%% automatic 
memory banking using trace%%dsh%%based address mining%%per%%]$~ ~$[in acm fpga%%lst%% 
pages 179–188%%lst%% 2017%%per%% 
