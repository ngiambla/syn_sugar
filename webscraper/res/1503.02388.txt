 There are numerous non-technical impediments to making software maintainable and re-useable.
 For example: you should provide the compiler and build toolchain; you should provide build tools (e.g.
 The software ones we know of, the SMT Competition (http: 5 //smtcomp.sourceforge.net/2014/), SV-COMP (http://sv-comp.sosy-lab.org/2015/) and Termination Problems Data Base (http://termination-portal.org/wiki/TPDB) are on that journey.
 Available from: https://royalsociety.org/ policy/projects/science-public-enterprise/report/. 8 [3] Editorial, Devil in the details, Nature, vol. 470, no. 7334, pp. 305 306, 2011. [4] B.
 Jamieson, Self-correction in science at work, Science, vol. 348, no. 6242, pp. 1420 1422, 2015. [5] C.
 Freire, A Computational Reproducibility Benchmark, IEEE Data Engineering Bulletin, vol. 36, no. 4, pp. 54 59, 2013. [21] V.
 Seiler, ResearchCompendia.org: Cyberinfrastructure for Reproducibility and Collaboration in Computational Science, Computing in Science & Engineering, vol. 17, no. 12, 2015. [23] V.
 Taufer, Enhancing reproducibility for computational methods, Science, vol. 354, no. 6317, pp. 1240 1241, 2016. [24] S.
 Bourne, Ten Simple Rules for Cultivating Open Science and Collaborative R&D, PLoS Computational Biology, vol. 9, no. 9, p. e1003244, 2013. [32] G.
 Albrecht, Ten Simple Rules for Developing Usable Software in Computational Biology, PLoS Computational Biology, vol. 13, no. 1, p. e1005265, 2017. [37] V.
