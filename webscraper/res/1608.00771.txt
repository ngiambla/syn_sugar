 We explore a simple semantic framework for smart contracts, covering both operational and non-operational aspects, and describe templates and agreements for legally-enforceable smart contracts, based on legal documents.
 We also explore the design landscape, including increasing sophistication of parameters, increasing use of common standardised code, and long-term research. 1 Introduction The aim of Smart Contract Templates [2] is to support the management of the complete lifecycle of smart legal contracts.
 Our de nition of smart contract does not require that this automation occurs on a shared ledger, though that is certainly a possible and even probable method.
 As an example of how automation might be achieved using smart legal contracts, Grigg [9] presents the Ricardian Contract triple of prose, parameters and code .1 The legal prose is linked via parameters (name-value pairs) to the smart contract code that provides automation.
 For example, a software agent might have been developed that will be instantiated on a shared ledger and, once initiated, will proceed to undertake various transfers of value in accordance with the legal prose.
 Following Grigg s Ricardian Contract triple [9], they use parameters to connect legal prose to the corresponding computer code, with the aim of providing a legally-enforceable foundation for smart legal contracts.
 Complex sets of legal documentation can be augmented with the identi cation of operational parameters that are key to directing the behaviour of the smart contract code (in this paper we call these code parameters ) the smart contract code is assumed to be standardised code whose behaviour can be controlled by the input of such parameters.
 Figure 4: From a Barclays demonstration of Smart Contract Templates: an editor permits business logic from the legal prose to be highlighted, and then annotated to denote a higher-order parameter.
 We then explored the design landscape: increasing the sophistication of parameters to complex higher-order types and business logic that could be admissible in court and potentially replace the corresponding legal prose.
 We also explored increasing the use of common standardised code through greater sharing, evolving from di erent codebases across banks to broader adoption of common utility functions to common business logic.
