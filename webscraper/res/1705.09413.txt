 Then we discuss the key features of blocks languages and how they relate to learning.
 The study used a version of Alice that gen- erated Java code from Alice blocks, and a mediated transfer pedagogy that made explicit connections between program- ming concepts in Alice and Java.
 Three of these — selection, use, and coordination — reﬂect the diﬃculty of simply assembling a program.
 In the words of one student, JavaScript “is really confusing to understand with all the parentheses and brackets and all of that” [38].
 Although blocks programming environments for beginners have long been oﬀered online, text-based programming envi- ronments are also becoming available online.
 In response, professional programming and end-user programming en- vironments are beginning to incorporate example support [5, 31].
 But there is a tradeoﬀ between the simplicity of reuse and the robustness of reused code.
 For example, Scratch simpliﬁes sharing of code examples for novices by providing a “backpack” for collecting program snippets and assets that can be shared and dragged into a new project.
 The newest generation of blocks programming tools include features that are designed to resolve the tension between Figure 7: Pencil Code provides bidirectional switch- ing between blocks and text.
 The Stride editor also introduces a hybrid approach to editing code, diﬀerentiating between low-level and high-level structure (Figure 6).
 For expression-level code, it hides syn- tactic structure and allows traditional text editing, providing high-density display and lower viscosity.
 Now, the falling cost and rising availability of 3D printers has made it possible for non-specialists to write their own custom 3D modeling code.
 Two recently developed languages bring programming for 3D printing to novice users: BeetleBlocks [17] and Madeup [14].
 To address both problems, Paolo Bottoni and Miguel Ce- riani have created a blocks language they call the SPARQL Playground [4].
 In ACM SIGCHI Conference on Human Factors in Computing Systems, CHI ’10, pages 513–522, 2010. [6] J.
