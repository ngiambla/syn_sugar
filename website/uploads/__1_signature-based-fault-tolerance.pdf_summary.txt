 SiFT provides fault tolerance against incorrect function behaviour from software bugs, bugs injected by a high- level synthesis tool, or bugs caused by single event upsets.
, Upon successful code inspection, we proﬁle code at the function level of a high-level description.
, SiFT introduces Function Characterization, a classiﬁcation method of function behaviour which asserts synthesized hardware functions behave as described in software.
, We implement SiFT as an LLVM [2] compiler pass, to facilitate integration into the existing high-level synthesis tool LegUp [3].
, However, this high-level synthesis process vigorously op- timizes1 the high-level description during compilation, which can lead to unwanted bug generation in the resulting hardware description.
, Compiled hardware designs from high-level synthesis could then suffer from all possible bugs that occur in software.
, It would be logical to inspect a high-level description before entering the HLS process, as this may mitigate potential bugs which could be synthesized to hardware.
, Before completion of the compi- lation, SiFT performs a compiler pass which proﬁles and gains knowledge of the high-level description at a function level.
, Hence, the signature collected by this Ding et al.’s approach allows for (1) identiﬁcation of a failure, and (2) diagnosis of the failure.
, This approach traces program execution with known input values to each function in question during high-level synthesis [25].
, Referring to Figure 2, SiFT is only concerned with steps (1) and (3) of this system ﬂow.
, SiFT has the following behaviour: (a) Static code inspection for various bugs, which we refer to as Hesitant Inspection.
, We do not consider using symbolic execution tools for bug detection as we could extend SiFT to gain this functionality.
, Although other bug detection techniques could be investigated, SATURN seems to work well for the types of high-level description typical to HLS, which are algorithmic descriptions.
, Function Inspection Once the high-level description passes SATURN’s bug detection mechanism, SiFT permits LegUp to begin opera- tion.
, Immediately after the compilation process, SiFT is called by LegUp as an LLVM pass and begins the Function Inspection process.
, Our pass allows for proﬁling of function We iterate, SiFT is not a debugging tool, and hence does not aim to identify the origins of faults.
, This pass also includes a JIT compiler for a function’s bitcode, which allows the pass to identify func- tion behaviour.
, Aiken, “Saturn: A sat-based tool for bug detection,” in International Conference on Computer Aided Veriﬁcation, pp. 139–143, Springer, 2005. [2] C.
, Anderson, “Source-level debugging for fpga high-level synthesis,” in Field Programmable Logic and Appli- cations (FPL), 2014 24th International Conference on, pp. 1–8, IEEE, 2014. [10] J.
